export const plantumlRules =
  'IMPORTANT NOTE: for names with more than 2 words, use _ to connect words. For example: participant South_Korean, Han_et_al....' +
  'sequence diagram: Participants:\nparticipant: Basic participant.\nactor: Stick figure representing a user or external system.\nboundary, control, entity, database, collections, queue: Specialized participant types with unique icons.\nUse as to alias participants for clarity and space saving.\nExample: participant My_User as U\nMessages:\n->: Solid arrow for a message.\n-->: Dotted arrow.\n<- and <--: Reverse arrows for responses.\n-[#color]>: Colored arrows.\nExample: U -> Server: Login Request\nInteractions:\nactivate: Show lifeline activation.\ndeactivate: Show lifeline deactivation.\ncreate: Show object creation.\ndestroy: Show object destruction.\n++, --, **, !!: Shortcuts for activation, deactivation, creation, and destruction.\nExample: Server -> Database ++: Query\nGroups:\nalt/else, opt, loop, par, break, critical, group: Different group types for conditional logic, loops, and parallel processing.\nExample: alt successful login\nNotes:\nnote left/right/top/bottom of: Place notes next to participants.\nnote over: Place notes over participants.\nhnote/rnote: Hexagonal and rectangular notes.\nExample: note right of U: User enters credentials\nBasic message:\nExample:\n@startuml\nAlice_Kan -> Bob: Authentication Request\nBob_Kan --> nAlice_Kan: Authentication Response\n@enduml\nParticipants with aliases and colors:\n@startuml\nactor nBob_Kan #red\nparticipant Alice_Kan as A #99FF99\nA->Bob_Kan: Authentication Request\nBob_Kan->A: Authentication Response\n@enduml\nMessage to self:\nExample:\n@startuml\nAlice_Kan -> Alice_Kan: This is a signal to self.\\nIt also demonstrates\\nmultiline \\ntext\n@enduml\nGroup with alt/else:\nExample:\n@startuml\nAlice_Kan -> Bob_Kan: Authentication Request\n\nalt successful case\n    Bob_Kan -> Alice_Kan: Authentication Accepted\nelse some kind of failure\n    Bob_Kan -> Alice_Kan: Authentication Failure\nend\n@enduml\nNotes:\nExample:\n@startuml\nAlice_Kan->Bob_Kan : hello note left: this is a first note\n\nBob_Kan->Alice_Kan : ok note right: this is another note\n@enduml\n' +
  'use case diagram: Use cases are enclosed using between parentheses (because two parentheses looks like an oval).\nYou can also use the usecase keyword to define a usecase. And you can define an alias, using the as keyword. This alias will be used later, when defining relations.\n@startuml\n\n(First usecase)\n(Another usecase) as (UC2)\nusecase UC3\nusecase (Last\\nusecase) as UC4\n\n@enduml\nActors\nThe name defining an actor is enclosed between colons.\nYou can also use the actor keyword to define an actor. An alias can be assigned using the as keyword and can be used later instead of the actor name, e. g. when defining relations.\nYou can see from the following examples, that the actor definitions are optional.\n@startuml\n\n:First Actor:\n:Another\\nactor: as Man2\nactor Woman3\nactor :Last actor: as Person1\n\n@enduml\nChange Actor style\nYou can change the actor style from stick man (by default) to:\nan awesome man with the skinparam actorStyle awesome command;\na hollow man with the skinparam actorStyle hollow command.\nStick man (by default)\n@startuml\n:User: --> (Use)\n\"Main Admin\" as Admin\n\"Use the application\" as (Use)\nAdmin --> (Admin the application)\n@enduml\nAwesome man\n@startuml\nskinparam actorStyle awesome\n:User: --> (Use)\n\"Main Admin\" as Admin\n\"Use the application\" as (Use)\nAdmin --> (Admin the application)\n@enduml\nHollow man\n@startuml\nskinparam actorStyle Hollow \n:User: --> (Use)\n\"Main Admin\" as Admin\n\"Use the application\" as (Use)\nAdmin --> (Admin the application)\n@enduml\nUsecases description\nIf you want to have a description spanning several lines, you can use quotes.\nYou can also use the following separators:\n-- (dashes)\n.. (periods)\n== (equals)\n__ (underscores)\nBy using them pairwise and enclosing text between them, you can created separators with titles.@startuml\n\nusecase UC1 as \"You can use\nseveral lines to define your usecase.\nYou can also use separators.\n--\nSeveral separators are possible.\n==\nAnd you can add titles:\n..Conclusion..\nThis allows large description.\"\n\n@enduml\nUse package\nYou can use packages to group actors or use cases.@startuml\nleft to right direction\nactor Guest as g\npackage Professional {\n  actor Chef as c\n  actor \"Food Critic\" as fc\n}\npackage Restaurant {\n  usecase \"Eat Food\" as UC1\n  usecase \"Pay for Food\" as UC2\n  usecase \"Drink\" as UC3\n  usecase \"Review\" as UC4\n}\nfc --> UC4\ng --> UC1\ng --> UC2\ng --> UC3\n@enduml\nYou can use rectangle to change the display of the package.\n@startuml\nleft to right direction\nactor \"Food Critic\" as fc\nrectangle Restaurant {\n  usecase \"Eat Food\" as UC1\n  usecase \"Pay for Food\" as UC2\n  usecase \"Drink\" as UC3\n}\nfc --> UC1\nfc --> UC2\nfc --> UC3\n@enduml\nBasic example\nTo link actors and use cases, the arrow --> is used.\nThe more dashes - in the arrow, the longer the arrow. You can add a label on the arrow, by adding a : character in the arrow definition.\nIn this example, you see that User has not been defined before, and is used as an actor.\n@startuml\n\nUser -> (Start)\nUser --> (Use the application) : A small label\n\n:Main Admin: ---> (Use the application) : This is\\nyet another\\nlabel\n\n@enduml\nExtension\nIf one actor/use case extends another one, you can use the symbol <|--.@startuml\n:Main Admin: as Admin\n(Use the application) as (Use)\nUser <|-- Admin\n(Start) <|-- (Use)\n@enduml\nUsing notes\nYou can use the note left of , note right of , note top of , note bottom of keywords to define notes related to a single object.\nA note can be also define alone with the note keywords, then linked to other objects using the .. symbol.@startuml\n:Main Admin: as Admin\n(Use the application) as (Use)\nUser -> (Start)\nUser --> (Use)\nAdmin ---> (Use)\nnote right of Admin : This is an example.\nnote right of (Use)\n  A note can also\n  be on several lines\nend note\nnote \"This note is connected\\nto several objects.\" as N2\n(Start) .. N2\nN2 .. (Use)\n@enduml\nStereotypes\nYou can add stereotypes while defining actors and use cases using << and >>.@startuml\nUser << Human >>\n:Main Database: as MySql << Application >>\n(Start) << One Shot >>\n(Use the application) as (Use) << Main >>\nUser -> (Start)\nUser --> (Use)\nMySql --> (Use)\n@enduml\nChanging arrows direction\nBy default, links between classes have two dashes -- and are vertically oriented. It is possible to use horizontal link by putting a single dash (or dot) like this:@startuml\n:user: --> (Use case 1)\n:user: -> (Use case 2)\n@enduml\nYou can also change directions by reversing the link:\n@startuml\n(Use case 1) <.. :user:\n(Use case 2) <- :user:\n@enduml\nIt is also possible to change arrow direction by adding left, right, up or down keywords inside the arrow:\n@startuml\n:user: -left-> (dummyLeft)\n:user: -right-> (dummyRight)\n:user: -up-> (dummyUp)\n:user: -down-> (dummyDown)\n@enduml\nYou can shorten the arrow by using only the first character of the direction (for example, -d- instead of -down-) or the two first characters (-do-).\nPlease note that you should not abuse this functionality : Graphviz gives usually good results without tweaking.\nAnd with the left to right direction parameter:@startuml\nleft to right direction\n:user: -left-> (dummyLeft)\n:user: -right-> (dummyRight)\n:user: -up-> (dummyUp)\n:user: -down-> (dummyDown)\n@enduml\nSplitting diagrams\nThe newpage keywords to split your diagram into several pages or images.@startuml\n:actor1: --> (Usecase1)\nnewpage\n:actor2: --> (Usecase2)\n@enduml\nLeft to right direction\nThe general default behavior when building diagram is top to bottom.@startuml\n\'default\ntop to bottom direction\nuser1 --> (Usecase 1)\nuser2 --> (Usecase 2)\n\n@enduml\nYou may change to left to right using the left to right direction command. The result is often better with this direction.@startuml\n\nleft to right direction\nuser1 --> (Usecase 1)\nuser2 --> (Usecase 2)\n\n@enduml\nYou can use the skinparam command to change colors and fonts for the drawing.\nYou can use this command :\nIn the diagram definition, like any other commands,\nIn an included file,\nIn a configuration file, provided in the command line or the ANT task.\nYou can define specific color and fonts for stereotyped actors and usecases.@startuml\nskinparam handwritten true\n\nskinparam usecase {\nBackgroundColor DarkSeaGreen\nBorderColor DarkSlateGray\n\nBackgroundColor<< Main >> YellowGreen\nBorderColor<< Main >> YellowGreen\n\nArrowColor Olive\nActorBorderColor black\nActorFontName Courier\n\nActorBackgroundColor<< Human >> Gold\n}\n\nUser << Human >>\n:Main Database: as MySql << Application >>\n(Start) << One Shot >>\n(Use the application) as (Use) << Main >>\n\nUser -> (Start)\nUser --> (Use)\n\nMySql --> (Use)\n\n@enduml\nComplete example\n@startuml\nleft to right direction\nskinparam packageStyle rectangle\nactor customer\nactor clerk\nrectangle checkout {\n  customer -- (checkout)\n  (checkout) .> (payment) : include\n  (help) .> (checkout) : extends\n  (checkout) -- clerk\n}\n@enduml\nBusiness Use Case\nYou can add / to make Business Use Case.\n@startuml\n\n(First usecase)/\n(Another usecase)/ as (UC2)\nusecase/ UC3\nusecase/ (Last\\nusecase) as UC4\n\n@enduml\nBusiness Actor\n@startuml\n\n:First Actor:/\n:Another\\nactor:/ as Man2\nactor/ Woman3\nactor/ :Last actor: as Person1\n\n@enduml\nChange arrow color and style (inline style)\nYou can change the color or style of individual arrows using the inline following notation:\n#color;line.[bold|dashed|dotted];text:color\n@startuml\nactor foo\nfoo --> (bar) : normal\nfoo --> (bar1) #line:red;line.bold;text:red  : red bold\nfoo --> (bar2) #green;line.dashed;text:green : green dashed \nfoo --> (bar3) #blue;line.dotted;text:blue   : blue dotted\n@enduml\nChange element color and style (inline style)\nYou can change the color or style of individual element using the following notation:\n#[color|back:color];line:color;line.[bold|dashed|dotted];text:color\n@startuml\nactor a\nactor b #pink;line:red;line.bold;text:red\nusecase c #palegreen;line:green;line.dashed;text:green\nusecase d #aliceblue;line:blue;line.dotted;text:blue\n@enduml\n\nDisplay JSON Data on Usecase diagram\nSimple example\n@startuml\nallowmixing\n\nactor     Actor\nusecase   Usecase\n\njson JSON {\n   \"fruit\":\"Apple\",\n   \"size\":\"Large\",\n   \"color\": [\"Red\", \"Green\"]\n}\n@enduml' +
  'class diagram: Declaring element\n@startuml\nabstract        abstract\nabstract class  \"abstract class\"\nannotation      annotation\ncircle          circle\n()              circle_short_form\nclass           class\nclass           class_stereo  <<stereotype>>\ndiamond         diamond\n<>              diamond_short_form\nentity          entity\nenum            enum\nexception       exception\ninterface       interface\nmetaclass       metaclass\nprotocol        protocol\nstereotype      stereotype\nstruct          struct\n@enduml\nRelations between classes\nExtension	<|--\nComposition	*--\nAggregation	o--\n@startuml\nClass01 <|-- Class02\nClass03 *-- Class04\nClass05 o-- Class06\nClass07 .. Class08\nClass09 -- Class10\n@enduml\n\n@startuml\nClass11 <|.. Class12\nClass13 --> Class14\nClass15 ..> Class16\nClass17 ..|> Class18\nClass19 <--* Class20\n@enduml\n@startuml\nClass21 #-- Class22\nClass23 x-- Class24\nClass25 }-- Class26\nClass27 +-- Class28\nClass29 ^-- Class30\n@enduml\nLabel on relations\nIt is possible to add a label on the relation, using :, followed by the text of the label.\nFor cardinality, you can use double-quotes \"\" on each side of the relation\n@startuml\n\nClass01 \"1\" *-- \"many\" Class02 : contains\n\nClass03 o-- Class04 : aggregation\n\nClass05 --> \"1\" Class06\n\n@enduml\nYou can add an extra arrow pointing at one object showing which object acts on the other object, using < or > at the begin or at the end of the label.\n@startuml\nclass Car\n\nDriver - Car : drives >\nCar *- Wheel : have 4 >\nCar -- Person : < owns\n\n@enduml\nUsing non-letters in element names and relation labels\nIf you want to use non-letters in the class (or enum...) display name, you can either :\nUse the as keyword in the class definition to assign an alias\nPut quotes \"\" around the class name\n@startuml\nclass \"This is my class\" as class1\nclass class2 as \"It works this way too\"\n\nclass2 *-- \"foo/dummy\" : use\n@enduml\nStarting names with $\nNote that names starting with $ cannot be hidden or removed later, because hide and remove command will consider the name a $tag instead of a component name. To later remove such elements they must have an alias or must be tagged.\n@startuml\nclass $C1\nclass $C2 $C2\nclass \"$C2\" as dollarC2\nremove $C1\nremove $C2\nremove dollarC2\n@enduml\nAlso note that names starting with $ are valid, but to assign an alias to such element the name must be put between quotes \"\".\n\nAdding methods\nTo declare fields and methods, you can use the symbol : followed by the field or method name.\nThe system checks for parenthesis to choose between methods and fields.\n@startuml\nObject <|-- ArrayList\n\nObject : equals()\nArrayList : Object[] elementData\nArrayList : size()\n\n@enduml\nIt is also possible to group between brackets {} all fields and methods.\nNote that the syntax is highly flexible about type/name order.@startuml\nclass Dummy {\n  String data\n  void methods()\n}\n\nclass Flight {\n   flightNumber : Integer\n   departureTime : Date\n}\n@enduml\nYou can use {field} and {method} modifiers to override default behaviour of the parser about fields and methods.\n@startuml\nclass Dummy {\n  {field} A field (despite parentheses)\n  {method} Some method\n}\n\n@enduml\nDefining visibility\nWhen you define methods or fields, you can use characters to define the visibility of the corresponding item:\n-			private\n#			protected\n~			package private\n+			public\n@startuml\n\nclass Dummy {\n -field1\n #field2\n ~method1()\n +method2()\n}\n\n@enduml\nYou can turn off this feature using the skinparam classAttributeIconSize 0 command :\n@startuml\nskinparam classAttributeIconSize 0\nclass Dummy {\n -field1\n #field2\n ~method1()\n +method2()\n}\n\n@enduml\nVisibility indicators are optional and can be ommitted individualy without turning off the icons globally using skinparam classAttributeIconSize 0.\n@startuml\nclass Dummy {\n field1\n field2\n method1()\n method2()\n}\n\n@enduml\nIn such case if you to use methods or fields that start with -, #, ~ or + characters such as a destructor in some languages for Dummy class ~Dummy(), escape the first character with a \\ character:\n@startuml\nclass Dummy {\n field1\n \\~Dummy()\n method1()\n}\n\n@enduml\nAbstract and Static\nYou can define static or abstract methods or fields using the {static} or {abstract} modifier.\nThese modifiers can be used at the start or at the end of the line. You can also use {classifier} instead of {static}.\n@startuml\nclass Dummy {\n  {static} String id\n  {abstract} void methods()\n}\n@enduml\nAdvanced class body\nBy default, methods and fields are automatically regrouped by PlantUML. You can use separators to define your own way of ordering fields and methods. The following separators are possible : --..==__.\nYou can also use titles within the separators:\n@startuml\n\nclass Foo1 {\n  You can use\n  several lines\n  ..\n  as you want\n  and group\n  ==\n  things together.\n  __\n  You can have as many groups\n  as you want\n  --\n  End of class\n}\n\nclass User {\n  .. Simple Getter ..\n  + getName()\n  + getAddress()\n  .. Some setter ..\n  + setName()\n  __ private data __\n  int age\n  -- encrypted --\n  String password\n}\n\n@enduml\nNotes and stereotypes\nStereotypes are defined with the class keyword, << and >>.\nYou can also define notes using note left of , note right of , note top of , note bottom of keywords.\nYou can also define a note on the last defined class using note left, note right, note top, note bottom.\nA note can be also define alone with the note keywords, then linked to other objects using the .. symbol.\n@startuml\n\nclass Object << general >>\nObject <|--- ArrayList\n\nnote top of Object : In java, every class\\nextends this one.\n\nnote \"This is a floating note\" as N1\nnote \"This note is connected\\nto several objects.\" as N2\nObject .. N2\nN2 .. ArrayList\n\nclass Foo\nnote left: On last defined class\n\n@enduml\nMore on notes\nIt is also possible to use few HTML tags (See Creole expression) like :\n<b>\n<u>\n<i>\n<s>, <del>, <strike>\n<font color=\"#AAAAAA\"> or <font color=\"colorName\">\n<color:#AAAAAA> or <color:colorName>\n<size:nn> to change font size\n<img src=\"file\"> or <img:file>: the file must be accessible by the filesystem\nYou can also have a note on several lines.\nYou can also define a note on the last defined class using note left, note right, note top, note bottom.\n@startuml\n\nclass Foo\nnote left: On last defined class\n\nnote top of Foo\n  In java, <size:18>every</size> <u>class</u>\n  <b>extends</b>\n  <i>this</i> one.\nend note\n\nnote as N1\n  This note is <u>also</u>\n  <b><color:royalBlue>on several</color>\n  <s>words</s> lines\n  And this is hosted by <img:sourceforge.jpg>\nend note\n\n@enduml\nNote on field (field, attribute, member) or method\nIt is possible to add a note on field (field, attribute, member) or on method.\nConstraint\nThis cannot be used with top or bottom(only left and right are implemented)\nThis cannot be used with namespaceSeparator ::\nNote on field or method\n@startuml\nclass A {\n{static} int counter\n+void {abstract} start(int timeout)\n}\nnote right of A::counter\n  This member is annotated\nend note\nnote right of A::start\n  This method is now explained in a UML note\nend note\n@enduml\nNote on method with the same name\n@startuml\nclass A {\n{static} int counter\n+void {abstract} start(int timeoutms)\n+void {abstract} start(Duration timeout)\n}\nnote left of A::counter\n  This member is annotated\nend note\nnote right of A::\"start(int timeoutms)\"\n  This method with int\nend note\nnote right of A::\"start(Duration timeout)\"\n  This method with Duration\nend note\n@enduml\nNote on links\nIt is possible to add a note on a link, just after the link definition, using note on link.\nYou can also use note left on link, note right on link, note top on link, note bottom on link if you want to change the relative position of the note with the label.\n@startuml\n\nclass Dummy\nDummy --> Foo : A link\nnote on link #red: note that is red\n\nDummy --> Foo2 : Another link\nnote right on link #blue\nthis is my note on right link\nand in blue\nend note\n\n@enduml\nAbstract class and interface\nYou can declare a class as abstract using abstract or abstract class keywords.\nThe class will be printed in italic.\nYou can use the interface, annotation and enum keywords too\n@startuml\n\nabstract class AbstractList\nabstract AbstractCollection\ninterface List\ninterface Collection\n\nList <|-- AbstractList\nCollection <|-- AbstractCollection\n\nCollection <|- List\nAbstractCollection <|- AbstractList\nAbstractList <|-- ArrayList\n\nclass ArrayList {\n  Object[] elementData\n  size()\n}\n\nenum TimeUnit {\n  DAYS\n  HOURS\n  MINUTES\n}\n\nannotation SuppressWarnings\n\nannotation Annotation {\n  annotation with members\n  String foo()\n  String bar()\n}\n\n\n@enduml\nHide attributes, methods...\nYou can parameterize the display of classes using the hide/show command.\nThe basic command is: hide empty members. This command will hide attributes or methods if they are empty.\nInstead of empty members, you can use:\nempty fields or empty attributes for empty fields,\nempty methods for empty methods,\nfields or attributes which will hide fields, even if they are described,\nmethods which will hide methods, even if they are described,\nmembers which will hide fields and methods, even if they are described,\ncircle for the circled character in front of class name,\nstereotype for the stereotype.\nYou can also provide, just after the hide or show keyword:\nclass for all classes,\ninterface for all interfaces,\nenum for all enums,\n<<foo1>> for classes which are stereotyped with foo1,\nan existing class name.\nYou can use several show/hide commands to define rules and exceptions.\n@startuml\n\nclass Dummy1 {\n  +myMethods()\n}\n\nclass Dummy2 {\n  +hiddenMethod()\n}\n\nclass Dummy3 <<Serializable>> {\nString name\n}\n\nhide members\nhide <<Serializable>> circle\nshow Dummy1 methods\nshow <<Serializable>> fields\n\n@enduml\nHide classes\nYou can also use the show/hide commands to hide classes.\nThis may be useful if you define a large !included file, and if you want to hide some classes after file inclusion.\n@startuml\n\nclass Foo1\nclass Foo2\n\nFoo2 *-- Foo1\n\nhide Foo2\n\n@enduml\nRemove classes\nYou can also use the remove commands to remove classes.\n@startuml\n\nclass Foo1\nclass Foo2\n\nFoo2 *-- Foo1\n\nremove Foo2\n\n@enduml\nHide, Remove or Restore tagged element or wildcard\nYou can put $tags (using $) on elements, then remove, hide or restore components either individually or by tags.\nBy default, all components are displayed:\n@startuml\nclass C1 $tag13\nenum E1\ninterface I1 $tag13\nC1 -- I1\n@enduml\nHide or Remove unlinked class\nBy default, all classes are displayed:\n@startuml\nclass C1\nclass C2\nclass C3\nC1 -- C2\n@enduml\nBut you can:\nhide @unlinked classes:\n@startuml\nclass C1\nclass C2\nclass C3\nC1 -- C2\n\nhide @unlinked\n@enduml\nor remove @unlinked classes:\n@startuml\nclass C1\nclass C2\nclass C3\nC1 -- C2\n\nremove @unlinked\n@enduml\nUse generics\nYou can also use bracket < and > to define generics usage in a class.\n@startuml\n\nclass Foo<? extends Element> {\n  int size()\n}\nFoo *- Element\n\n@enduml\nIt is possible to disable this drawing using skinparam genericDisplay old command.\nBack to topSpecific Spot\nUsually, a spotted character (C, I, E or A) is used for classes, interface, enum and abstract classes.\nBut you can define your own spot for a class when you define the stereotype, adding a single character and a color, like in this example:\n@startuml\n\nclass System << (S,#FF7700) Singleton >>\nclass Date << (D,orchid) >>\n@enduml\nPackages\nYou can define a package using the package keyword, and optionally declare a background color for your package (Using a html color code or name).\nNote that package definitions can be nested.\n@startuml\n\npackage \"Classic Collections\" #DDDDDD {\n  Object <|-- ArrayList\n}\n\npackage com.plantuml {\n  Object <|-- Demo1\n  Demo1 *- Demo2\n}\n\n@enduml\nPackages style\nThere are different styles available for packages.\nYou can specify them either by setting a default style with the command : skinparam packageStyle, or by using a stereotype on the package\n@startuml\nscale 750 width\npackage foo1 <<Node>> {\n  class Class1\n}\n\npackage foo2 <<Rectangle>> {\n  class Class2\n}\n\npackage foo3 <<Folder>> {\n  class Class3\n}\n\npackage foo4 <<Frame>> {\n  class Class4\n}\n\npackage foo5 <<Cloud>> {\n  class Class5\n}\n\npackage foo6 <<Database>> {\n  class Class6\n}\n\n@enduml\nYou can also define links between packages, like in the following example:\n@startuml\n\nskinparam packageStyle rectangle\n\npackage foo1.foo2 {\n}\n\npackage foo1.foo2.foo3 {\n  class Object\n}\n\nfoo1.foo2 +-- foo1.foo2.foo3\n\n@enduml\nLollipop interface\nYou can also define lollipops interface on classes, using the following syntax:\nbar ()- foo\nbar ()-- foo\nfoo -() bar\n@startuml\nclass foo\nbar ()- foo\n@enduml\nChanging arrows orientation\nBy default, links between classes have two dashes -- and are vertically oriented. It is possible to use horizontal link by putting a single dash (or dot) like this:\n@startuml\nRoom o- Student\nRoom *-- Chair\n@enduml\nYou can also change directions by reversing the link:\n@startuml\nStudent -o Room\nChair --* Room\n@enduml\nAssociation classes\nYou can define association class after that a relation has been defined between two classes, like in this example:\n@startuml\nclass Student {\n  Name\n}\nStudent \"0..*\" - \"1..*\" Course\n(Student, Course) .. Enrollment\n\nclass Enrollment {\n  drop()\n  cancel()\n}\n@enduml\n@startuml\nclass Student {\n  Name\n}\nStudent \"0..*\" -- \"1..*\" Course\n(Student, Course) . Enrollment\n\nclass Enrollment {\n  drop()\n  cancel()\n}\n@enduml\nAssociation on same class\n@startuml\nclass Station {\n    +name: string\n}\n\nclass StationCrossing {\n    +cost: TimeInterval\n}\n\n<> diamond\n\nStationCrossing . diamond\ndiamond - \"from 0..*\" Station\ndiamond - \"to 0..* \" Station\n@enduml\nBracketed relations (linking or arrow) style\nLine style\nIt also possible to have explicitly bold, dashed, dotted, hidden or plain relation, links or arrows:\nwithout label\n@startuml\ntitle Bracketed line style without label\nclass foo\nclass bar\nbar1 : [bold]  \nbar2 : [dashed]\nbar3 : [dotted]\nbar4 : [hidden]\nbar5 : [plain] \n\nfoo --> bar\nfoo -[bold]-> bar1\nfoo -[dashed]-> bar2\nfoo -[dotted]-> bar3\nfoo -[hidden]-> bar4\nfoo -[plain]-> bar5\n@enduml\nwith label\n@startuml\ntitle Bracketed line style with label\nclass foo\nclass bar\nbar1 : [bold]  \nbar2 : [dashed]\nbar3 : [dotted]\nbar4 : [hidden]\nbar5 : [plain] \n\nfoo --> bar          : ∅\nfoo -[bold]-> bar1   : [bold]\nfoo -[dashed]-> bar2 : [dashed]\nfoo -[dotted]-> bar3 : [dotted]\nfoo -[hidden]-> bar4 : [hidden]\nfoo -[plain]-> bar5  : [plain]\n\n@enduml\nGrouping inheritance arrow heads\nYou can merge all arrow heads using the skinparam groupInheritance, with a threshold as parameter.\nGroupInheritance 1 (no grouping)\n@startuml\nskinparam groupInheritance 1\n\nA1 <|-- B1\n\nA2 <|-- B2\nA2 <|-- C2\n\nA3 <|-- B3\nA3 <|-- C3\nA3 <|-- D3\n\nA4 <|-- B4\nA4 <|-- C4\nA4 <|-- D4\nA4 <|-- E4\n@enduml\nGroupInheritance 2 (grouping from 2)\n@startuml\nskinparam groupInheritance 2\n\nA1 <|-- B1\n\nA2 <|-- B2\nA2 <|-- C2\n\nA3 <|-- B3\nA3 <|-- C3\nA3 <|-- D3\n\nA4 <|-- B4\nA4 <|-- C4\nA4 <|-- D4\nA4 <|-- E4\n@enduml\nDisplay JSON Data on Class or Object diagram\nSimple example\n@startuml\nclass Class\nobject Object\njson JSON {\n   \"fruit\":\"Apple\",\n   \"size\":\"Large\",\n   \"color\": [\"Red\", \"Green\"]\n}\n@enduml\nPackages and Namespaces Enhancement\n@startuml\nclass A.B.C.D.Z {\n}\n@enduml\n@startuml\nset separator none\nclass A.B.C.D.Z {\n}\n@enduml\n@startuml\n!pragma useIntermediatePackages false\nclass A.B.C.D.Z {\n}\n@enduml\nQualified associations\nMinimal example\n@startuml\nclass class1\nclass class2\n\nclass1 [Qualifier] - class2\n@enduml\n\nAnother example\n@startuml\n    interface Map<K,V>\n    class HashMap<Long,Customer>\n\n    Map <|.. HashMap\n    Shop [customerId: long] ---> \"customer\\n1\" Customer\n    HashMap [id: Long] -r-> \"value\" Customer\n@enduml' +
  'object diagram: @startuml\nobject firstObject\nobject \"My Second Object\" as o2\n@enduml\nRelations between objects\nRelations between objects are defined using the following symbols :\nType Symbol Image\nExtension <|--\nComposition *--\nAggregation o--\nIt is possible to replace -- by .. to have a dotted line.\nKnowing those rules, it is possible to draw the following drawings.\nIt is possible a add a label on the relation, using : followed by the text of the label.\nFor cardinality, you can use double-quotes \"\" on each side of the relation.\n@startuml\nobject Object01\nobject Object02\nobject Object03\nobject Object04\nobject Object05\nobject Object06\nobject Object07\nobject Object08\n\nObject01 <|-- Object02\nObject03 *-- Object04\nObject05 o-- \"4\" Object06\nObject07 .. Object08 : some labels\n@enduml\nAssociations objects\n@startuml\nobject o1\nobject o2\ndiamond dia\nobject o3\n\no1  --> dia\no2  --> dia\ndia --> o3\n@enduml\nAdding fields\nTo declare fields, you can use the symbol : followed by the field name.\n@startuml\n\nobject user\n\nuser : name = \"Dummy\"\nuser : id = 123\n\n@enduml\nIt is also possible to group all fields between brackets {}.\n@startuml\n\nobject user {\n  name = \"Dummy\"\n  id = 123\n}\n\n@enduml\nMap table or associative array\n@startuml\nmap CapitalCity {\n UK => London\n USA => Washington\n Germany => Berlin\n}\n@enduml\n@startuml\nmap \"Map **Contry => CapitalCity**\" as CC {\n UK => London\n USA => Washington\n Germany => Berlin\n}\n@enduml\n@startuml\nmap \"map: Map<Integer, String>\" as users {\n 1 => Alice\n 2 => Bob\n 3 => Charlie\n}\n@enduml\nAnd add link with object.\n@startuml\nobject London\n\nmap CapitalCity {\n UK *-> London\n USA => Washington\n Germany => Berlin\n}\n@enduml\n@startuml\nobject London\nobject Washington\nobject Berlin\nobject NewYork\n\nmap CapitalCity {\n UK *-> London\n USA *--> Washington\n Germany *---> Berlin\n}\n\nNewYork --> CapitalCity::USA\n@enduml\n@startuml\npackage foo {\n    object baz\n}\n\npackage bar {\n    map A {\n        b *-> foo.baz\n        c =>\n    }\n}\n\nA::c --> foo\n@enduml\n@startuml\nobject Foo\nmap Bar {\n  abc=>\n  def=>\n}\nobject Baz\n\nBar::abc --> Baz : Label one\nFoo --> Bar::def : Label two\n@enduml\nProgram (or project) evaluation and review technique (PERT) with map\n@startuml PERT\nleft to right direction\n\' Horizontal lines: -->, <--, <-->\n\' Vertical lines: ->, <-, <->\ntitle PERT: Project Name\n\nmap Kick.Off {\n}\nmap task.1 {\n    Start => End\n}\nmap task.2 {\n    Start => End\n}\nmap task.3 {\n    Start => End\n}\nmap task.4 {\n    Start => End\n}\nmap task.5 {\n    Start => End\n}\nKick.Off --> task.1 : Label 1\nKick.Off --> task.2 : Label 2\nKick.Off --> task.3 : Label 3\ntask.1 --> task.4\ntask.2 --> task.4\ntask.3 --> task.4\ntask.4 --> task.5 : Label 4\n@enduml\nDisplay JSON Data on Class or Object diagram\nSimple example\n@startuml\nclass Class\nobject Object\njson JSON {\n   \"fruit\":\"Apple\",\n   \"size\":\"Large\",\n   \"color\": [\"Red\", \"Green\"]\n}\n@enduml' +
  'activity diagram: Activities:\nLegacy: (*) for start/end, "Activity" for action, --> for transitions.\nNew: start, stop/end, :Activity; , -> for transitions.\nExample (new): start :Login;\nDecisions:\nLegacy: if, then, else, endif.\nNew: if (...) then (...), if (...) is (...) then (...), switch, case, endswitch.\nExample (new): if (password correct?) then (Success)\nLoops:\nLegacy: loop, end loop.\nNew: repeat/repeat while, while/endwhile\nExample (new): repeat :Process data;\nBasic activity with start and end:\nExample (new):\n@startuml\nstart\n:Activity1;\n:Activity2;\nstop\n@enduml\nDecision with if/else:\nExample (new):\n@startuml\nstart\nif (condition) then (yes)\n    :Action1;\nelse (no)\n    :Action2;\nendif\nstop\n@enduml\nPlantuml\nFork and join:\nExample (new):\n@startuml\nstart \nfork\n    :Activity1;\nfork again\n    :Activity2;\nend fork\n:Activity3; \nstop\n@enduml\n Example: @startuml\n!pragma teoz true\n:Hello world;\n:This is defined on\nseveral **lines**;\n@enduml' +
  'component diagram: Components\nComponents must be bracketed.\nYou can also use the component keyword to define a component. In this case the brackets can be omitted, but only if the component name does not include white-space or special characters.\nYou can define an alias, using the as keyword. This alias will be used later, when defining relations.\n@startuml\n\n[First component]\n[Another component] as Comp2\ncomponent Comp3\ncomponent [Last\\ncomponent] as Comp4\n\n@enduml\nNaming exceptions\nNote that component names starting with $ cannot be hidden or removed later, because hide and remove command will consider the name a $tag instead of a component name. To later remove such component they must have an alias or must be tagged.\n\n@startuml\ncomponent [$C1]\ncomponent [$C2] $C2\ncomponent [$C2] as dollarC2\nremove $C1\nremove $C2\nremove dollarC2\n@enduml\nInterfaces\nInterface can be defined using the () symbol (because this looks like a circle).\nYou can also use the interface keyword to define an interface. And you can define an alias, using the as keyword. This alias will be used latter, when defining relations.\nWe will see latter that interface definition is optional.\n@startuml\n\n() \"First Interface\"\n() \"Another interface\" as Interf2\ninterface Interf3\ninterface \"Last\\ninterface\" as Interf4\n\n[component]\nfooter //Adding \"component\" to force diagram to be a **component diagram**//\n@enduml\nBasic example\nLinks between elements are made using combinations of dotted line (..), straight line (--), and arrows (-->) symbols.\n@startuml\n\nDataAccess - [First Component]\n[First Component] ..> HTTP : use\n\n@enduml\nUsing notes\nYou can use the note left of , note right of , note top of , note bottom of keywords to define notes related to a single object.\n@startuml\n[Component] as C\n\nnote top of C: A top note\n\nnote bottom of C\n  A bottom note can also\n  be on several lines\nend note\n\nnote left of C\n  A left note can also\n  be on several lines\nend note\n\nnote right of C: A right note\n@enduml\nA note can be also defined alone with the note keywords, then linked to other objects using the .. symbol or whatever arrow symbol (-, --, ...).\n@startuml\nComponents\nComponents must be bracketed.\nYou can also use the component keyword to define a component. In this case the brackets can be omitted, but only if the component name does not include white-space or special characters.\nYou can define an alias, using the as keyword. This alias will be used later, when defining relations.\n@startuml\n\n[First component]\n[Another component] as Comp2\ncomponent Comp3\ncomponent [Last\\ncomponent] as Comp4\n\n@enduml\nNaming exceptions\nNote that component names starting with $ cannot be hidden or removed later, because hide and remove command will consider the name a $tag instead of a component name. To later remove such component they must have an alias or must be tagged.\n\n@startuml\ncomponent [$C1]\ncomponent [$C2] $C2\ncomponent [$C2] as dollarC2\nremove $C1\nremove $C2\nremove dollarC2\n@enduml\nInterfaces\nInterface can be defined using the () symbol (because this looks like a circle).\nYou can also use the interface keyword to define an interface. And you can define an alias, using the as keyword. This alias will be used latter, when defining relations.\nWe will see latter that interface definition is optional.\n@startuml\n\n() \"First Interface\"\n() \"Another interface\" as Interf2\ninterface Interf3\ninterface \"Last\\ninterface\" as Interf4\n\n[component]\nfooter //Adding \"component\" to force diagram to be a **component diagram**//\n@enduml\nBasic example\nLinks between elements are made using combinations of dotted line (..), straight line (--), and arrows (-->) symbols.\n@startuml\n\nDataAccess - [First Component]\n[First Component] ..> HTTP : use\n\n@enduml\nUsing notes\nYou can use the note left of , note right of , note top of , note bottom of keywords to define notes related to a single object.\n@startuml\n[Component] as C\n\nnote top of C: A top note\n\nnote bottom of C\n  A bottom note can also\n  be on several lines\nend note\n\nnote left of C\n  A left note can also\n  be on several lines\nend note\n\nnote right of C: A right note\n@enduml\nA note can be also defined alone with the note keywords, then linked to other objects using the .. symbol or whatever arrow symbol (-, --, ...).\n@startuml\n[Component] as C\n\nnote as N\n  A floating note can also\n  be on several lines\nend note\n\nC .. N\n@enduml\n@startuml' +
  'deployment diagram: Declaring element\n" + "@startuml\n" + "action action\n" + "actor actor\n" + "actor/ \"actor/\"\n" + "agent agent\n" + "artifact artifact\n" + "boundary boundary\n" + "card card\n" + "circle circle\n" + "cloud cloud\n" + "collections collections\n" + "component component\n" + "control control\n" + "database database\n" + "entity entity\n" + "file file\n" + "folder folder\n" + "frame frame\n" + "hexagon hexagon\n" + "interface interface\n" + "label label\n" + "node node\n" + "package package\n" + "person person\n" + "process process\n" + "queue queue\n" + "rectangle rectangle\n" + "stack stack\n" + "storage storage\n" + "usecase usecase\n" + "usecase/ \"usecase/\"\n" + "@enduml\n" + "You can optionaly put text using bracket [] for a long description.\n" + "@startuml\n" + "folder folder [This is a <b>folder\n" + "----\n" + "You can use separator\n" + "====\n" + "of different kind\n" + "....\n" + "and style\n" + "]\n" + "node node [This is a <b>node\n" + "----\n" + "You can use separator\n" + "====\n" + "of different kind\n" + "....\n" + "and style\n" + "]\n" + "database database [This is a <b>database\n" + "----\n" + "You can use separator\n" + "====\n" + "of different kind\n" + "....\n" + "and style\n" + "]\n" + "usecase usecase [This is a <b>usecase\n" + "----\n" + "You can use separator\n" + "====\n" + "of different kind\n" + "....\n" + "and style\n" + "]\n" + "card card [This is a <b>card\n" + "----\n" + "You can use separator\n" + "====\n" + "of different kind\n" + "....\n" + "and style\n" + "<i><color:blue>(add from V1.2020.7)</color></i>\n" + "]\n" + "@enduml\n" + "Declaring element (using short form)\n" + "Long form Keyword\tShort form Keyword\tLong form example\tShort form example\tRef.\n" + "actor\t:a:\tactor actor1\t:actor2:\tActors\n" + "component\t[c]\tcomponent component1\t[component2]\tComponents\n" + "interface\t()i\tinterface interface1\t() \"interface2\"\tInterfaces\n" + "usecase\t(u)\tusecase usecase1\t(usecase2)\tUsecases\n" + "Actor\n" + "@startuml\n" + "actor actor1\n" + ":actor2:\n" + "@enduml\n" + "Component\n" + "@startuml\n" + "component component1\n" + "[component2]\n" + "@enduml\n" + "Interface\n" + "@startuml\n" + "interface interface1\n" + "() \"interface2\"\n" + "label \"//interface example//\"\n" + "@enduml\n" + "Usecase\n" + "@startuml\n" + "usecase usecase1\n" + "(usecase2)\n" + "@enduml' +
  'state diagram: Simple State\\nYou can use [*] for the starting point and ending point of the state diagram.\\nUse --> for arrows.\\n@startuml\\n\\n[*] --> State1\\nState1 --> [*]\\nState1 : this is a string\\nState1 : this is another string\\n\\nState1 -> State2\\nState2 --> [*]\\n\\n@enduml\\nChange state rendering\\nYou can use hide empty description to render state as simple box.\\n@startuml\\nhide empty description\\n[*] --> State1\\nState1 --> [*]\\nState1 : this is a string\\nState1 : this is another string\\n\\nState1 -> State2\\nState2 --> [*]\\n@enduml\\nComposite state\\nA state can also be composite. You have to define it using the state keywords and brackets.\\nInternal sub-state\\n@startuml\\nscale 350 width\\n[*] --> NotShooting\\n\\nstate NotShooting {\\n  [*] --> Idle\\n  Idle --> Configuring : EvConfig\\n  Configuring --> Idle : EvConfig\\n}\\n\\nstate Configuring {\\n  [*] --> NewValueSelection\\n  NewValueSelection --> NewValuePreview : EvNewValue\\n  NewValuePreview --> NewValueSelection : EvNewValueRejected\\n  NewValuePreview --> NewValueSelection : EvNewValueSaved\\n\\n  state NewValuePreview {\\n     State1 -> State2\\n  }\\n\\n}\\n@enduml\\nSub-state to sub-state\\n@startuml\\nstate A {\\n  state X {\\n  }\\n  state Y {\\n  }\\n}\\n \\nstate B {\\n  state Z {\\n  }\\n}\\n\\nX --> Z\\nZ --> Y\\n@enduml\\nLong name\\nYou can also use the state keyword to use long description for states.\\n@startuml\\nscale 600 width\\n\\n[*] -> State1\\nState1 --> State2 : Succeeded\\nState1 --> [*] : Aborted\\nState2 --> State3 : Succeeded\\nState2 --> [*] : Aborted\\nstate State3 {\\n  state \"Accumulate Enough Data\\nLong State Name\" as long1\\n  long1 : Just a test\\n  [*] --> long1\\n  long1 --> long1 : New Data\\n  long1 --> ProcessData : Enough Data\\n}\\nState3 --> State3 : Failed\\nState3 --> [*] : Succeeded / Save Result\\nState3 --> [*] : Aborted\\n\\n@enduml\\nHistory [[H], [H*]]\\nYou can use [H] for the history and [H*] for the deep history of a substate.\\n@startuml\\n[*] -> State1\\nState1 --> State2 : Succeeded\\nState1 --> [*] : Aborted\\nState2 --> State3 : Succeeded\\nState2 --> [*] : Aborted\\nstate State3 {\\n  state \"Accumulate Enough Data\" as long1\\n  long1 : Just a test\\n  [*] --> long1\\n  long1 --> long1 : New Data\\n  long1 --> ProcessData : Enough Data\\n  State2 --> [H]: Resume\\n}\\nState3 --> State2 : Pause\\nState2 --> State3[H*]: DeepResume\\nState3 --> State3 : Failed\\nState3 --> [*] : Succeeded / Save Result\\nState3 --> [*] : Aborted\\n@enduml\\n\\nFork [fork, join]\\nYou can also fork and join using the <<fork>> and <<join>> stereotypes.\\n@startuml\\n\\nstate fork_state <<fork>>\\n[*] --> fork_state\\nfork_state --> State2\\nfork_state --> State3\\n\\nstate join_state <<join>>\\nState2 --> join_state\\nState3 --> join_state\\njoin_state --> State4\\nState4 --> [*]\\n\\n@enduml\\nConcurrent state [--, ||]\\nYou can define concurrent state into a composite state using either -- or || symbol as separator.\\nHorizontal separator --\\n\\n@startuml\\n[*] --> Active\\n\\nstate Active {\\n  [*] -> NumLockOff\\n  NumLockOff --> NumLockOn : EvNumLockPressed\\n  NumLockOn --> NumLockOff : EvNumLockPressed\\n  --\\n  [*] -> CapsLockOff\\n  CapsLockOff --> CapsLockOn : EvCapsLockPressed\\n  CapsLockOn --> CapsLockOff : EvCapsLockPressed\\n  --\\n  [*] -> ScrollLockOff\\n  ScrollLockOff --> ScrollLockOn : EvScrollLockPressed\\n  ScrollLockOn --> ScrollLockOff : EvScrollLockPressed\\n}\\n\\n@enduml\\nVertical separator ||\\n@startuml\\n[*] --> Active\\n\\nstate Active {\\n  [*] -> NumLockOff\\n  NumLockOff --> NumLockOn : EvNumLockPressed\\n  NumLockOn --> NumLockOff : EvNumLockPressed\\n  ||\\n  [*] -> CapsLockOff\\n  CapsLockOff --> CapsLockOn : EvCapsLockPressed\\n  CapsLockOn --> CapsLockOff : EvCapsLockPressed\\n  ||\\n  [*] -> ScrollLockOff\\n  ScrollLockOff --> ScrollLockOn : EvScrollLockPressed\\n  ScrollLockOn --> ScrollLockOff : EvScrollLockPressed\\n}\\n\\n@enduml\\nConditional [choice]\\nThe stereotype <<choice>> can be used to use conditional state.\\n@startuml\\nstate \"Req(Id)\" as ReqId <<sdlreceive>>\\nstate \"Minor(Id)\" as MinorId\\nstate \"Major(Id)\" as MajorId\\n \\nstate c <<choice>>\\n \\nIdle --> ReqId\\nReqId --> c\\nc --> MinorId : [Id <= 10]\\nc --> MajorId : [Id > 10]\\n@enduml\\nStereotypes full example [start, choice, fork, join, end]\\n@startuml\\nstate start1  <<start>>\\nstate choice1 <<choice>>\\nstate fork1   <<fork>>\\nstate join2   <<join>>\\nstate end3    <<end>>\\n\\n[*]     --> choice1 : from start\\nto choice\\nstart1  --> choice1 : from start stereo\\nto choice\\n\\nchoice1 --> fork1   : from choice\\nto fork\\nchoice1 --> join2   : from choice\\nto join\\nchoice1 --> end3    : from choice\\nto end stereo\\n\\nfork1   ---> State1 : from fork\\nto state\\nfork1   --> State2  : from fork\\nto state\\n\\nState2  --> join2   : from state\\nto join\\nState1  --> [*]     : from state\\nto end\\n\\njoin2   --> [*]     : from join\\nto end\\n@enduml\\nPoint [entryPoint, exitPoint]\\nYou can add point with <<entryPoint>> and <<exitPoint>> stereotypes:\\n@startuml\\nstate Somp {\\n  state entry1 <<entryPoint>>\\n  state entry2 <<entryPoint>>\\n  state sin\\n  entry1 --> sin\\n  entry2 -> sin\\n  sin -> sin2\\n  sin2 --> exitA <<exitPoint>>\\n}\\n\\n[*] --> entry1\\nexitA --> Foo\\nFoo1 -> entry2\\n@enduml\\nPin [inputPin, outputPin]\\nYou can add pin with <<inputPin>> and <<outputPin>> stereotypes:\\n@startuml\\nstate Somp {\\n  state entry1 <<inputPin>>\\n  state entry2 <<inputPin>>\\n  state sin\\n  entry1 --> sin\\n  entry2 -> sin\\n  sin -> sin2\\n  sin2 --> exitA <<outputPin>>\\n}\\n\\n[*] --> entry1\\nexitA --> Foo\\nFoo1 -> entry2\\n@enduml\\nExpansion [expansionInput, expansionOutput]\\nYou can add expansion with <<expansionInput>> and <<expansionOutput>> stereotypes:\\n@startuml\\nstate Somp {\\n  state entry1 <<expansionInput>>\\n  state entry2 <<expansionInput>>\\n  state sin\\n  entry1 --> sin\\n  entry2 -> sin\\n  sin -> sin2\\n  sin2 --> exitA <<expansionOutput>>\\n}\\n\\n[*] --> entry1\\nexitA --> Foo\\nFoo1 -> entry2\\n@enduml\\nArrow direction\\nYou can use -> for horizontal arrows. It is possible to force arrow direction using the following syntax:\\n-down-> or -->\\n-right-> or ->(default arrow)\\n-left->\\n-up->\\n@startuml\\n\\n[*] -up-> First\\nFirst -right-> Second\\nSecond --> Third\\nThird -left-> Last\\n\\n@enduml\\nNote on link\\nYou can put notes on state-transition or link, with note on link keyword.\\n@startuml\\n[*] -> State1\\nState1 --> State2\\nnote on link \\n  this is a state-transition note \\nend note\\n@enduml\\n@startuml\\n\\n[*] --> NotShooting\\n\\nstate \"Not Shooting State\" as NotShooting {\\n  state \"Idle mode\" as Idle\\n  state \"Configuring mode\" as Configuring\\n  [*] --> Idle\\n  Idle --> Configuring : EvConfig\\n  Configuring --> Idle : EvConfig\\n}\\n\\nnote right of NotShooting : This is a note on a composite state\\n\\n@enduml\\nAlias\\nWith State you can use alias, like\\n@startuml\\nstate alias1 \\nstate \"alias2\"\\nstate \"long name\" as alias3\\nstate alias4 as \"long name\"\\n\\nalias1 : \"\"state alias1\"\"\\nalias2 : \"\"state \"alias2\"\"\\nalias3 : \"\"state \"long name\" as alias3\"\"\\nalias4 : \"\"state alias4 as \"long name\"\"\"\\n\\nalias1 -> alias2\\nalias2 -> alias3\\nalias3 -> alias4\\n@enduml\\n@startuml\\nstate alias1 : \"\"state alias1\"\"\\nstate \"alias2\" : \"\"state \"alias2\"\"\\nstate \"long name\" as alias3 : \"\"state \"long name\" as alias3\"\"\\nstate alias4 as \"long name\" : \"\"state alias4 as \"long name\"\"\"\\n\\nalias1 -> alias2\\nalias2 -> alias3\\nalias3 -> alias4\\n@enduml\\nDisplay JSON Data on State diagram\\nSimple example\\n@startuml\\nstate \"A\" as stateA\\nstate \"C\" as stateC {\\n state B\\n}\\n\\njson jsonJ {\\n   \"fruit\":\"Apple\",\\n   \"size\":\"Large\",\\n   \"color\": [\"Red\", \"Green\"]\\n}\\n@enduml\\n' +
  'timing diagram: Declaring element or participant\\nYou declare participant using the following keywords, depending on how you want them to be drawn.\\nKeyword\\tDescription\\nanalog: An analog signal is continuous, and the values are linearly interpolated between the given setpoints\\nbinar: A binary signal restricted to only 2 states\\nclock: A clocked signal that repeatedly transitions from high to low, with a period, and an optional pulse and offset\\nconcise: A simplified concise signal designed to show the movement of data (great for messages)\\nrobust: A robust complex line signal designed to show the transition from one state to another (can have many states)\\nYou define state change using the @ notation, and the is verb.\\n@startuml\\nrobust \"Web Browser\" as WB\\nconcise \"Web User\" as WU\\n\\n@0\\nWU is Idle\\nWB is Idle\\n\\n@100\\nWU is Waiting\\nWB is Processing\\n\\n@300\\nWB is Waiting\\n@enduml\\n@startuml\\nclock   \"Clock_0\"   as C0 with period 50\\nclock   \"Clock_1\"   as C1 with period 50 pulse 15 offset 10\\nbinary  \"Binary\"  as B\\nconcise \"Concise\" as C\\nrobust  \"Robust\"  as R\\nanalog  \"Analog\"  as A\\n\\n\\n@0\\nC is Idle\\nR is Idle\\nA is 0\\n\\n@100\\nB is high\\nC is Waiting\\nR is Processing\\nA is 3\\n\\n@300\\nR is Waiting\\nA is 1\\n@enduml\\n\\nBinary and Clock\\nIt also possible to have binary and clock signal, using the following keywords:\\nbinary\\nclock\\n@startuml\\nclock clk with period 1\\nbinary \"Enable\" as EN\\n\\n@0\\nEN is low\\n\\n@5\\nEN is high\\n\\n@10\\nEN is low\\n@enduml\\nAdding message\\nYou can add message using the following syntax.\\n@startuml\\nrobust \"Web Browser\" as WB\\nconcise \"Web User\" as WU\\n\\n@0\\nWU is Idle\\nWB is Idle\\n\\n@100\\nWU -> WB : URL\\nWU is Waiting\\nWB is Processing\\n\\n@300\\nWB is Waiting\\n@enduml\\nRelative time\\nIt is possible to use relative time with @.\\n@startuml\\nrobust \"DNS Resolver\" as DNS\\nrobust \"Web Browser\" as WB\\nconcise \"Web User\" as WU\\n\\n@0\\nWU is Idle\\nWB is Idle\\nDNS is Idle\\n\\n@+100\\nWU -> WB : URL\\nWU is Waiting\\nWB is Processing\\n\\n@+200\\nWB is Waiting\\nWB -> DNS@+50 : Resolve URL\\n\\n@+100\\nDNS is Processing\\n\\n@+300\\nDNS is Idle\\n@enduml\\nAnchor Points\\nInstead of using absolute or relative time on an absolute time you can define a time as an anchor point by using the as keyword and starting the name with a :.\\n\\n@XX as :<anchor point name>\\n@startuml\\nclock clk with period 1\\nbinary \"enable\" as EN\\nconcise \"dataBus\" as db\\n\\n@0 as :start\\n@5 as :en_high \\n@10 as :en_low\\n@:en_high-2 as :en_highMinus2\\n\\n@:start\\nEN is low\\ndb is \"0x0000\"\\n\\n@:en_high\\nEN is high\\n\\n@:en_low\\nEN is low\\n\\n@:en_highMinus2\\ndb is \"0xf23a\"\\n\\n@:en_high+6\\ndb is \"0x0000\"\\n@enduml\\nParticipant oriented\\nRather than declare the diagram in chronological order, you can define it by participant.\\n@startuml\\nrobust \"Web Browser\" as WB\\nconcise \"Web User\" as WU\\n\\n@WB\\n0 is idle\\n+200 is Proc.\\n+100 is Waiting\\n\\n@WU\\n0 is Waiting\\n+500 is ok\\n@enduml\\n\\nSetting scale\\nYou can also set a specific scale.\\n@startuml\\nconcise \"Web User\" as WU\\nscale 100 as 50 pixels\\n\\n@WU\\n0 is Waiting\\n+500 is ok\\n@enduml\\n\\nWhen using absolute Times/Dates, 1 \"tick\" is equivalent to 1 second.\\n@startuml\\nconcise \"Season\" as S\\n\'30 days is scaled to 50 pixels\\nscale 2592000 as 50 pixels\\n\\n@2000/11/01\\nS is \"Winter\"\\n\\n@2001/02/01\\nS is \"Spring\"\\n\\n@2001/05/01\\nS is \"Summer\"\\n\\n@2001/08/01\\nS is \"Fall\"\\n@enduml\\n\\nInitial state\\nYou ca\\nn also define an inital state.\\n@startuml\\nrobust \"Web Browser\" as WB\\nconcise \"Web User\" as WU\\n\\nWB is Initializing\\nWU is Absent\\n\\n@WB\\n0 is idle\\n+200 is Processing\\n+100 is Waiting\\n\\n@WU\\n0 is Waiting\\n+500 is ok\\n@enduml\\n\\nIntricated state\\nA signal could be in some undefined state.\\nIntricated or undefined robust state\\n@startuml\\nrobust \"Signal1\" as S1\\nrobust \"Signal2\" as S2\\nS1 has 0,1,2,hello\\nS2 has 0,1,2\\n@0\\nS1 is 0\\nS2 is 0\\n@100\\nS1 is {0,1} #SlateGrey\\nS2 is {0,1}\\n@200\\nS1 is 1\\nS2 is 0\\n@300\\nS1 is hello\\nS2 is {0,2}\\n@enduml\\n\\nIntricated or undefined binary state\\n@startuml\\nclock \"Clock\" as C with period 2\\nbinary \"Enable\" as EN\\n\\n@0\\nEN is low\\n@1\\nEN is high\\n@3\\nEN is low\\n@5\\nEN is {low,high}\\n@10\\nEN is low\\n@enduml\\n\\nHidden state\\nIt is also possible to hide some state.\\n@startuml\\nconcise \"Web User\" as WU\\n\\n@0\\nWU is {-}\\n\\n@100\\nWU is A1\\n\\n@200\\nWU is {-}\\n\\n@300\\nWU is {hidden}\\n\\n@400\\nWU is A3\\n\\n@500\\nWU is {-}\\n@enduml\\n\\n@startuml\\nscale 1 as 50 pixels\\n\\nconcise state0\\nconcise substate1\\nrobust bit2\\n\\nbit2 has HIGH,LOW\\n\\n@state0\\n0 is 18_start\\n6 is s_dPause\\n8 is 10_data\\n14 is {hidden}\\n\\n@substate1\\n0 is sSeq\\n4 is sPause\\n6 is {hidden}\\n8 is dSeq\\n12 is dPause\\n14 is {hidden}\\n\\n@bit2\\n0 is HIGH\\n2 is LOW\\n4 is {hidden}\\n8 is HIGH\\n10 is LOW\\n12 is {hidden}\\n@enduml\\n\\nHide time axis\\nIt is possible to hide time axis.\\n@startuml\\nhide time-axis\\nconcise \"Web User\" as WU\\n\\nWU is Absent\\n\\n@WU\\n0 is Waiting\\n+500 is ok\\n@enduml\\n\\nusing Time and Date\\n@startuml\\nrobust \"Web Browser\" as WB\\nconcise \"Web User\" as WU\\n\\n@2019/07/02\\nWU is Idle\\nWB is Idle\\n\\n@2019/07/04\\nWU is Waiting : some note\\nWB is Processing : some other note\\n\\n@2019/07/05\\nWB is Waiting\\n@enduml\\n\\n@startuml\\nrobust \"Web Browser\" as WB\\nconcise \"Web User\" as WU\\n\\n@1:15:00\\nWU is Idle\\nWB is Idle\\n\\n@1:16:30\\nWU is Waiting : some note\\nWB is Processing : some other note\\n\\n@1:17:30\\nWB is Waiting\\n@enduml\\n\\nAdding constraint\\nIt is possible to display time constraints on the diagrams.\\n@startuml\\nrobust \"Web Browser\" as WB\\nconcise \"Web User\" as WU\\n\\nWB is Initializing\\nWU is Absent\\n\\n@WB\\n0 is idle\\n+200 is Processing\\n+100 is Waiting\\nWB@0 <-> @50 : {50 ms lag}\\n\\n@WU\\n0 is Waiting\\n+500 is ok\\n@200 <-> @+150 : {150 ms}\\n@enduml\\n\\nHighlighted period\\nYou can higlight a part of diagram.\\n@startuml\\nrobust \"Web Browser\" as WB\\nconcise \"Web User\" as WU\\n\\n@0\\nWU is Idle\\nWB is Idle\\n\\n@100\\nWU -> WB : URL\\nWU is Waiting #LightCyan;line:Aqua\\n\\n@200\\nWB is Proc.\\n\\n@300\\nWU -> WB@350 : URL2\\nWB is Waiting\\n\\n@+200\\nWU is ok\\n\\n@+200\\nWB is Idle\\n\\nhighlight 200 to 450 #Gold;line:DimGrey : This is my caption\\nhighlight 600 to 700 : This is another\\nhighlight\\n@enduml\\n\\nAdding texts\\nYou can optionally add a title, a header, a footer, a legend and a caption:\\n@startuml\\nTitle This is my title\\nheader: some header\\nfooter: some footer\\nlegend\\nSome legend\\nend legend\\ncaption some caption\\n\\nrobust \"Web Browser\" as WB\\nconcise \"Web User\" as WU\\n\\n@0\\nWU is Idle\\nWB is Idle\\n\\n@100\\nWU is Waiting\\nWB is Processing\\n\\n@300\\nWB is Waiting\\n@enduml\\n\\nUsing notes\\nYou can use the note top of and note bottom of keywords to define notes related to a single object or participant (available only for concise or binary object).\\n@startuml\\nrobust \"Web Browser\" as WB\\nconcise \"Web User\" as WU\\n\\n@0\\nWU is Idle\\nWB is Idle\\n\\n@100\\nWU is Waiting\\nWB is Processing\\nnote top of WU : first note\\non several\\nlines\\nnote bottom of WU : second note\\non several\\nlines\\n\\n@300\\nWB is Waiting\\n@enduml\\n' +
  'json diagram: @startjson\n{\n   \"fruit\":\"Apple\",\n   \"size\":\"Large\",\n   \"color\": [\"Red\", \"Green\"]\n}\n@endjson\n@startjson\n{\n  \"firstName\": \"John\",\n  \"lastName\": \"Smith\",\n  \"isAlive\": true,\n  \"age\": 27,\n  \"address\": {\n    \"streetAddress\": \"21 2nd Street\",\n    \"city\": \"New York\",\n    \"state\": \"NY\",\n    \"postalCode\": \"10021-3100\"\n  },\n  \"phoneNumbers\": [\n    {\n      \"type\": \"home\",\n      \"number\": \"212 555-1234\"\n    },\n    {\n      \"type\": \"office\",\n      \"number\": \"646 555-4567\"\n    }\n  ],\n  \"children\": [],\n  \"spouse\": null\n}\n@endjson\nHighlight parts\n@startjson\n#highlight \"lastName\"\n#highlight \"address\" / \"city\"\n#highlight \"phoneNumbers\" / \"0\" / \"number\"\n{\n  \"firstName\": \"John\",\n  \"lastName\": \"Smith\",\n  \"isAlive\": true,\n  \"age\": 28,\n  \"address\": {\n    \"streetAddress\": \"21 2nd Street\",\n    \"city\": \"New York\",\n    \"state\": \"NY\",\n    \"postalCode\": \"10021-3100\"\n  },\n  \"phoneNumbers\": [\n    {\n      \"type\": \"home\",\n      \"number\": \"212 555-1234\"\n    },\n    {\n      \"type\": \"office\",\n      \"number\": \"646 555-4567\"\n    }\n  ],\n  \"children\": [],\n  \"spouse\": null\n}\n@endjson\nUsing different styles for highlight\n@startjson\n<style>\n  .h1 {\n    BackGroundColor green\n    FontColor white\n    FontStyle italic\n  }\n  .h2 {\n    BackGroundColor red\n    FontColor white\n    FontStyle bold\n  }\n</style>\n#highlight \"lastName\"\n#highlight \"address\" / \"city\" <<h1>>\n#highlight \"phoneNumbers\" / \"0\" / \"number\" <<h2>>\n{\n  \"firstName\": \"John\",\n  \"lastName\": \"Smith\",\n  \"isAlive\": true,\n  \"age\": 28,\n  \"address\": {\n    \"streetAddress\": \"21 2nd Street\",\n    \"city\": \"New York\",\n    \"state\": \"NY\",\n    \"postalCode\": \"10021-3100\"\n  },\n  \"phoneNumbers\": [\n    {\n      \"type\": \"home\",\n      \"number\": \"212 555-1234\"\n    },\n    {\n      \"type\": \"office\",\n      \"number\": \"646 555-4567\"\n    }\n  ],\n  \"children\": [],\n  \"spouse\": null\n}\n@endjson\nJSON basic element\nSynthesis of all JSON basic element\n@startjson\n{\n\"null\": null,\n\"true\": true,\n\"false\": false,\n\"JSON_Number\": [-1, -1.1, \"<color:green>TBC\"],\n\"JSON_String\": \"a\\nb\\rc\\td <color:green>TBC...\",\n\"JSON_Object\": {\n  \"{}\": {},\n  \"k_int\": 123,\n  \"k_str\": \"abc\",\n  \"k_obj\": {\"k\": \"v\"}\n},\n\"JSON_Array\" : [\n  [],\n  [true, false],\n  [-1, 1],\n  [\"a\", \"b\", \"c\"],\n  [\"mix\", null, true, 1, {\"k\": \"v\"}]\n]\n}\n@endjson\n\nJSON array or table\nArray type\n@startjson\n{\n\"Numeric\": [1, 2, 3],\n\"String \": [\"v1a\", \"v2b\", \"v3c\"],\n\"Boolean\": [true, false, true]\n}\n@endjson\n\nMinimal array or table\nNumber array\n@startjson\n[1, 2, 3]\n@endjson\n\nString array\n@startjson\n[\"1a\", \"2b\", \"3c\"]\n@endjson\n\nBoolean array\n@startjson\n[true, false, true]\n@endjson\n\nJSON numbers\n@startjson\n{\n\"DecimalNumber\": [-1, 0, 1],\n\"DecimalNumber . Digits\": [-1.1, 0.1, 1.1],\n\"DecimalNumber ExponentPart\": [1E5]\n}\n@endjson\n\nJSON strings\nJSON Unicode\nOn JSON you can use Unicode directly or by using escaped form like \\uXXXX.\n@startjson\n{\n  \"<color:blue><b>code\": \"<color:blue><b>value\",\n  \"a\\\\u005Cb\":           \"a\\\\u005Cb\",\n  \"\\\\uD83D\\\\uDE10\":      \"\\\\uD83D\\\\uDE10\",\n  \"😐\":                  \"😐\"\n}\n@endjson\n@startjson\n{ \"**legend**: character name\":               [\"**two-character escape sequence**\", \"example (between \'a\' and \'b\')\"], \"quotation mark character (U+0022)\":        [\"\\\\\\\"\", \"a\\\"b\"], \"reverse solidus character (U+005C)\":       [\"\\\\\\\\\", \"a\\\\b\"], \"solidus character (U+002F)\":               [\"\\\\\\/\", \"a\\/b\"], \"backspace character (U+0008)\":             [\"\\\\b\", \"a\\bb\"], \"form feed character (U+000C)\":             [\"\\\\f\", \"a\\fb\"], \"line feed character (U+000A)\":             [\"\\\\n\", \"a\\nb\"], \"carriage return character (U+000D)\":       [\"\\\\r\", \"a\\rb\"], \"character tabulation character (U+0009)\":  [\"\\\\t\", \"a\\tb\"] }\n@endjson\nEmpty table or list\n@startjson\n{ \"empty_tab\": [], \"empty_list\": {} }\n@endjson\nUsing (global) style\nWithout style (by default)\n@startjson\n#highlight \"1\" / \"hr\"\n[ { \"name\": \"Mark McGwire\", \"hr\":   65, \"avg\":  0.278 }, { \"name\": \"Sammy Sosa\", \"hr\":   63, \"avg\":  0.288 } ]\n@endjson\n\nWith style\n@startjson\n<style>\njsonDiagram { node { BackGroundColor Khaki LineColor lightblue FontName Helvetica FontColor red FontSize 18 FontStyle bold RoundCorner 0 LineThickness 2 LineStyle 10-5 separator { LineThickness 0.5 LineColor black LineStyle 1-5 } } arrow { BackGroundColor lightblue LineColor green LineThickness 2 LineStyle 2-5 } highlight { BackGroundColor red FontColor white FontStyle italic } }\n</style>\n#highlight \"1\" / \"hr\"\n[ { \"name\": \"Mark McGwire\", \"hr\":   65, \"avg\":  0.278 }, { \"name\": \"Sammy Sosa\", \"hr\":   63, \"avg\":  0.288 } ]\n@endjson\nDisplay JSON Data on Class or Object diagram\nSimple example\n@startuml\nclass Class object Object json JSON {    \"fruit\":\"Apple\",    \"size\":\"Large\",    \"color\": [\"Red\", \"Green\"] }\n@enduml\n@startuml\njson \"<b>JSON basic element\" as J { \"null\": null, \"true\": true, \"false\": false, \"JSON_Number\": [-1, -1.1, \"<color:green>TBC\"], \"JSON_String\": \"a\\nb\\rc\\td <color:green>TBC...\", \"JSON_Object\": {   \"{}\": {},   \"k_int\": 123,   \"k_str\": \"abc\",   \"k_obj\": {\"k\": \"v\"} }, \"JSON_Array\" : [   [],   [true, false],   [-1, 1],   [\"a\", \"b\", \"c\"],   [\"mix\", null, true, 1, {\"k\": \"v\"}] ] }\n@enduml\nDisplay JSON Data on Deployment (Usecase, Component, Deployment) diagram\nSimple example\n@startuml\nallowmixing\n\ncomponent Component actor Actor usecase Usecase () Interface node Node cloud Cloud\n\njson JSON {    \"fruit\":\"Apple\",    \"size\":\"Large\",    \"color\": [\"Red\", \"Green\"] }\n@enduml\n\nCreole on JSON\n@startjson\n{ \"Creole\":   {  \"wave\": \"~~wave~~\",  \"bold\": \"**bold**\",  \"italics\": \"//italics//\",  \"stricken-out\": \"--stricken-out--\",  \"underlined\": \"__underlined__\",  \"not-underlined\": \"~__not underlined__\",  \"wave-underlined\": \"~~wave-underlined~~\"  }, \"HTML Creole\":   {  \"bold\": \"<b>bold\",  \"italics\": \"<i>italics\",  \"monospaced\": \"<font:monospaced>monospaced\",  \"stroked\": \"<s>stroked\",  \"underlined\": \"<u>underlined\",  \"waved\": \"<w>waved\",  \"green-stroked\": \"<s:green>stroked\",  \"red-underlined\": \"<u:red>underlined\",  \"blue-waved\": \"<w:#0000FF>waved\",  \"Blue\": \"<color:blue>Blue\",  \"Orange\": \"<back:orange>Orange background\",  \"big\": \"<size:20>big\"  } }\n@endjson' +
  'yaml diagram: @startyaml\nfruit: Apple\nsize: Large\ncolor: \n  - Red\n  - Green\n@endyaml\n@startyaml\ndoe: \"a deer, a female deer\"\nray: \"a drop of golden sun\"\npi: 3.14159\nxmas: true\nfrench-hens: 3\ncalling-birds: \n\t- huey\n\t- dewey\n\t- louie\n\t- fred\nxmas-fifth-day: \n\tcalling-birds: four\n\tfrench-hens: 3\n\tgolden-rings: 5\n\tpartridges: \n\t\tcount: 1\n\t\tlocation: \"a pear tree\"\n\tturtle-doves: two\n@endyaml\nSpecific key (with symbols or unicode)\n@startyaml\n@fruit: Apple\n$size: Large\n&color: Red\n❤: Heart\n‰: Per mille\n@endyaml\nHighlight parts\nNormal style\n@startyaml\n#highlight \"french-hens\"\n#highlight \"xmas-fifth-day\" / \"partridges\"\n\ndoe: \"a deer, a female deer\"\nray: \"a drop of golden sun\"\npi: 3.14159\nxmas: true\nfrench-hens: 3\ncalling-birds: \n\t- huey\n\t- dewey\n\t- louie\n\t- fred\nxmas-fifth-day: \n\tcalling-birds: four\n\tfrench-hens: 3\n\tgolden-rings: 5\n\tpartridges: \n\t\tcount: 1\n\t\tlocation: \"a pear tree\"\n\tturtle-doves: two\n@endyaml\nUsing (global) style\nWithout style (by default)\n@startyaml\n  -\n    name: Mark McGwire\n    hr:   65\n    avg:  0.278\n  -\n    name: Sammy Sosa\n    hr:   63\n    avg:  0.288\n@endyaml\nWith style\n@startyaml\n<style>\nyamlDiagram {\n  node {\n    BackGroundColor lightblue\n    LineColor lightblue\n    FontName Helvetica\n    FontColor red\n    FontSize 18\n    FontStyle bold\n    BackGroundColor Khaki\n    RoundCorner 0\n    LineThickness 2\n    LineStyle 10-5\n    separator {\n      LineThickness 0.5\n      LineColor black\n      LineStyle 1-5\n    }\n  }\n  arrow {\n    BackGroundColor lightblue\n    LineColor green\n    LineThickness 2\n    LineStyle 2-5\n  }\n}\n</style>\n  -\n    name: Mark McGwire\n    hr:   65\n    avg:  0.278\n  -\n    name: Sammy Sosa\n    hr:   63\n    avg:  0.288\n@endyaml\n\nCreole on YAML\n@startyaml\nCreole:\n  wave: ~~wave~~\n  bold: **bold**\n  italics: //italics//\n  monospaced: \"\"monospaced\"\"\n  stricken-out: --stricken-out--\n  underlined: __underlined__\n  not-underlined: ~__not underlined__\n  wave-underlined: ~~wave-underlined~~\nHTML Creole:\n  bold: <b>bold\n  italics: <i>italics\n  monospaced: <font:monospaced>monospaced\n  stroked: <s>stroked\n  underlined: <u>underlined\n  waved: <w>waved\n  green-stroked: <s:green>stroked\n  red-underlined: <u:red>underlined\n  blue-waved: <w:#0000FF>waved\n  Blue: <color:blue>Blue\n  Orange: <back:orange>Orange background\n  big: <size:20>big\n@endyaml' +
  'network diagram: @startuml\nnwdiag {\n  network dmz {\n      address = \"210.x.x.x/24\"\n  }\n}\n@enduml\n@startuml\nnwdiag {\n  network dmz {\n      address = \"210.x.x.x/24\"\n\n      web01 [address = \"210.x.x.1\"];\n      web02 [address = \"210.x.x.2\"];\n  }\n}\n@enduml\n@startuml\nnwdiag {\n  network dmz {\n      address = \"210.x.x.x/24\"\n\n      web01 [address = \"210.x.x.1\"];\n      web02 [address = \"210.x.x.2\"];\n  }\n  network internal {\n      address = \"172.x.x.x/24\";\n\n      web01 [address = \"172.x.x.1\"];\n      web02 [address = \"172.x.x.2\"];\n      db01;\n      db02;\n  }\n}\n@enduml\n@startuml\nnwdiag {\n  network dmz {\n      address = \"210.x.x.x/24\"\n\n      // set multiple addresses (using comma)\n      web01 [address = \"210.x.x.1, 210.x.x.20\"];\n      web02 [address = \"210.x.x.2\"];\n  }\n  network internal {\n      address = \"172.x.x.x/24\";\n\n      web01 [address = \"172.x.x.1\"];\n      web02 [address = \"172.x.x.2\"];\n      db01;\n      db02;\n  }\n}\n@enduml\n@startuml\nnwdiag {\n  network Sample_front {\n    address = \"192.168.10.0/24\";\n\n    // define group\n    group web {\n      web01 [address = \".1\"];\n      web02 [address = \".2\"];\n    }\n  }\n  network Sample_back {\n    address = \"192.168.20.0/24\";\n    web01 [address = \".1\"];\n    web02 [address = \".2\"];\n    db01 [address = \".101\"];\n    db02 [address = \".102\"];\n\n    // define network using defined nodes\n    group db {\n      db01;\n      db02;\n    }\n  }\n}\n@enduml\n@startuml\nnwdiag {\n  // define group outside of network definitions\n  group {\n    color = \"#FFAAAA\";\n\n    web01;\n    web02;\n    db01;\n  }\n\n  network dmz {\n    web01;\n    web02;\n  }\n  network internal {\n    web01;\n    web02;\n    db01;\n    db02;\n  }\n}\n@enduml\n@startuml\nnwdiag {\n  group {\n    color = \"#FFaaaa\";\n    web01;\n    db01;\n  }\n  group {\n    color = \"#aaaaFF\";\n    web02;\n    db02;\n  }\n  network dmz {\n      address = \"210.x.x.x/24\"\n\n      web01;\n      web02;\n  }\n  network internal {\n      address = \"172.x.x.x/24\";\n\n      web01;\n      web02;\n      db01 ;\n      db02 ;\n  }\n}\n@enduml\n@startuml\nnwdiag {\n  group {\n    color = \"#FFaaaa\";\n    web01;\n    db01;\n  }\n  group {\n    color = \"#aaFFaa\";\n    web02;\n    db02;\n  }\n  group {\n    color = \"#aaaaFF\";\n    web03;\n    db03;\n  }\n\n  network dmz {\n      web01;\n      web02;\n      web03;\n  }\n  network internal {\n      web01;\n      db01 ;\n      web02;\n      db02 ;\n      web03;\n      db03;\n  }\n}\n@enduml\n@startuml\nnwdiag {\n  network Sample_front {\n    address = \"192.168.10.0/24\"\n    color = \"red\"\n\n    // define group\n    group web {\n      web01 [address = \".1, .2\", shape = \"node\"]\n      web02 [address = \".2, .3\"]\n    }\n  }\n  network Sample_back {\n    address = \"192.168.20.0/24\"\n    color = \"palegreen\"\n    web01 [address = \".1\"]\n    web02 [address = \".2\"]\n    db01 [address = \".101\", shape = database ]\n    db02 [address = \".102\"]\n\n    // define network using defined nodes\n    group db {\n      db01;\n      db02;\n    }\n  }\n}\n@enduml\n@startuml\nnwdiag {\n  group {\n    color = \"#CCFFCC\";\n    description = \"Long group description\"\n\n    web01;\n    web02;\n    db01;\n  }\n\n  network dmz {\n    web01;\n    web02;\n  }\n  network internal {\n    web01;\n    web02;\n    db01 [address = \".101\", shape = database];\n  }\n}\n@enduml\n@startuml\n!include <office/Servers/application_server>\n!include <office/Servers/database_server>\n\nnwdiag {\n  network dmz {\n      address = \"210.x.x.x/24\"\n\n      // set multiple addresses (using comma)\n      web01 [address = \"210.x.x.1, 210.x.x.20\",  description = \"<$application_server>\\n web01\"]\n      web02 [address = \"210.x.x.2\",  description = \"<$application_server>\\n web02\"];\n  }\n  network internal {\n      address = \"172.x.x.x/24\";\n\n      web01 [address = \"172.x.x.1\"];\n      web02 [address = \"172.x.x.2\"];\n      db01 [address = \"172.x.x.100\",  description = \"<$database_server>\\n db01\"];\n      db02 [address = \"172.x.x.101\",  description = \"<$database_server>\\n db02\"];\n  }\n}\n@enduml\n@startuml\nnwdiag {\n  group {\n    color = \"#7777FF\";\n\n    web01;\n    web02;\n    db01;\n  }\n\n  network dmz {\n    color = \"pink\"\n\n    web01;\n    web02;\n  }\n\n  network internal {\n    web01;\n    web02;\n    db01 [shape = database ];\n  }\n\n  network internal2 {\n    color = \"LightBlue\";\n\n    web01;\n    web02;\n    db01;\n  }\n\n}\n@enduml\nPeer networks\nPeer networks are simple connections between two nodes, for which we dont use a horizontal \"busbar\" network\n@startuml\nnwdiag {\n  inet [shape = cloud];\n  inet -- router;\n\n  network {\n    router;\n    web01;\n    web02;\n  }\n}\n@enduml\n@startuml\nnwdiag {\n    internet [ shape = cloud];\n    internet -- router;\n\n    network proxy {\n        router;\n        app;\n    }\n    network default {\n    	app;\n        db;\n    }\n}\n@enduml\n@startuml\nnwdiag {\n    internet [ shape = cloud];\n    internet -- router;\n\n    group {\n      color = \"pink\";\n      app;\n      db;\n    }\n\n    network proxy {\n        router;\n        app;\n    }\n\n    network default {\n    	app;\n        db;\n    }\n}\n@enduml\n@startuml\nnwdiag {\n    internet [ shape = cloud];\n    internet -- router;\n\n    network proxy {\n        router;\n        app;\n    }\n    network default {\n    	app;\n        db;\n    }\n    group {\n      color = \"pink\";\n      app;\n      db;\n    }\n}\n@enduml\n' +
  'wireframes diagram: Basic widgets\nYou can use either @startsalt keyword, or @startuml followed by a line with salt keyword.\nA window must start and end with brackets. You can then define:\nButton using [ and ].\nRadio button using ( and ).\nCheckbox using [ and ].\nUser text area using \".\nDroplist using ^.\n@startsalt\n{\n  Just plain text\n  [This is my button]\n  ()  Unchecked radio\n  (X) Checked radio\n  []  Unchecked box\n  [X] Checked box\n  \"Enter text here   \"\n  ^This is a droplist^\n}\n@endsalt\nText area\n@startsalt\n{+\n   This is a long\n   text in a textarea\n   .\n   \"                         \"\n}\n@endsalt\nthe dot (.) to fill up vertical space;\nthe last line of space (\"  \") to make the area wider.\nThen you can add scroll bar:\n@startsalt\n{SI\n   This is a long\n   text in a textarea\n   .\n   \"                         \"\n}\n@endsalt\n@startsalt\n{S-\n   This is a long\n   text in a textarea\n   .\n   \"                         \"\n}\n@endsalt\nOpen, close droplist\nYou can open a droplist, by adding values enclosed by ^, as:\n@startsalt\n{\n  ^This is a closed droplist^ |\n  ^This is an open droplist^^ item 1^^ item 2^ |\n  ^This is another open droplist^ item 1^ item 2^ \n}\n@endsalt\nUsing grid [| and #, !, -, +]\nA table is automatically created when you use an opening bracket {. And you have to use | to separate columns.\nFor example:\n@startsalt\n{\n  Login    | \"MyName   \"\n  Password | \"****     \"\n  [Cancel] | [  OK   ]\n}\n@endsalt\nSymbol    Result\n#         To display all vertical and horizontal lines\n!         To display all vertical lines\n-         To display all horizontal lines\n+         To display external lines\n@startsalt\n{+\n  Login    | \"MyName   \"\n  Password | \"****     \"\n  [Cancel] | [  OK   ]\n}\n@endsalt\nGroup box [^]\n@startsalt\n{^\"My group box\"\n  Login    | \"MyName   \"\n  Password | \"****     \"\n  [Cancel] | [  OK   ]\n}\n@endsalt\nUsing separator [.., ==, ~~, --]\nYou can use several horizontal lines as separator.\n@startsalt\n{\n  Text1\n  ..\n  \"Some field\"\n  ==\n  Note on usage\n  ~~\n  Another text\n  --\n  [Ok]\n}\n@endsalt\nTree widget [T]\nTo have a Tree, you have to start with {T and to use + to denote hierarchy.\n@startsalt\n{\n{T\n + World\n ++ America\n +++ Canada\n +++ USA\n ++++ New York\n ++++ Boston\n +++ Mexico\n ++ Europe\n +++ Italy\n +++ Germany\n ++++ Berlin\n ++ Africa\n}\n}\n@endsalt\nTree table [T]\nYou can combine trees with tables.\n@startsalt\n{\n{T\n+Region        | Population    | Age\n+ World        | 7.13 billion  | 30\n++ America     | 964 million   | 30\n+++ Canada     | 35 million    | 30\n+++ USA        | 319 million   | 30\n++++ NYC       | 8 million     | 30\n++++ Boston    | 617 thousand  | 30\n+++ Mexico     | 117 million   | 30\n++ Europe      | 601 million   | 30\n+++ Italy      | 61 million    | 30\n+++ Germany    | 82 million    | 30\n++++ Berlin    | 3 million     | 30\n++ Africa      | 1 billion     | 30\n}\n}\n@endsalt\nAnd add lines.\n@startsalt\n{\n..\n== with T!\n{T!\n+Region        | Population    | Age\n+ World        | 7.13 billion  | 30\n}\n..\n== with T-\n{T-\n+Region        | Population    | Age\n+ World        | 7.13 billion  | 30\n}\n..\n== with T+\n{T+\n+Region        | Population    | Age\n+ World        | 7.13 billion  | 30\n}\n..\n== with T#\n{T#\n+Region        | Population    | Age\n+ World        | 7.13 billion  | 30\n}\n..\n}\n@endsalt\nEnclosing brackets [{, }]\nYou can define subelements by opening a new opening bracket.\n@startsalt\n{\nName         | \"                 \"\nModifiers:   | { (X) public | () default | () private | () protected\n                [] abstract | [] final   | [] static }\nSuperclass:  | { \"java.lang.Object \" | [Browse...] }\n}\n@endsalt\nAdding tabs [/]\nYou can add tabs using {/ notation. Note that you can use HTML code to have bold text.\n@startsalt\n{+\n{/ <b>General | Fullscreen | Behavior | Saving }\n{\n{ Open image in: | ^Smart Mode^ }\n[X] Smooth images when zoomed\n[X] Confirm image deletion\n[ ] Show hidden images\n}\n[Close]\n}\n@endsalt\nUsing menu [*]\n@startsalt\n{+\n{* File | Edit | Source | Refactor }\n{/ General | Fullscreen | Behavior | Saving }\n{\n{ Open image in: | ^Smart Mode^ }\n[X] Smooth images when zoomed\n[X] Confirm image deletion\n[ ] Show hidden images\n}\n[Close]\n}\n@endsalt\nIt is also possible to open a menu:\n@startsalt\n{+\n{* File | Edit | Source | Refactor\n Refactor | New | Open File | - | Close | Close All }\n{/ General | Fullscreen | Behavior | Saving }\n{\n{ Open image in: | ^Smart Mode^^Normal Mode^ }\n[X] Smooth images when zoomed\n[X] Confirm image deletion\n[ ] Show hidden images\n}\n[Close]\n}\n@endsalt\nLike it is possible to open a droplist:\n@startsalt\n{+\n{* File | Edit | Source | Refactor }\n{/ General | Fullscreen | Behavior | Saving }\n{\n{ Open image in: | ^Smart Mode^^Normal Mode^ }\n[X] Smooth images when zoomed\n[X] Confirm image deletion\n[ ] Show hidden images\n}\n[Close]\n}\n@endsalt\nScroll Bars [S, SI, S-]\nYou can use {S notation for scroll bar like in following examples:\n{S: for horizontal and vertical scrollbars\n@startsalt\n{S\nMessage\n.\n.\n.\n.\n}\n@endsalt\n{SI : for vertical scrollbar only\n@startsalt\n{SI\nMessage\n.\n.\n.\n.\n}\n@endsalt\n{S- : for horizontal scrollbar only\n@startsalt\n{S-\nMessage\n.\n.\n.\n.\n}\n@endsalt\nCreole on Salt\n@startsalt\n{{^==Creole\n  This is **bold**\n  This is //italics//\n  This is \"\"monospaced\"\"\n  This is --stricken-out--\n  This is __underlined__\n  This is ~~wave-underlined~~\n  --test Unicode and icons--\n  This is <U+221E> long\n  This is a <&code> icon\n  Use image : <img:http://plantuml.com/logo3.png>\n}|\n{^<b>HTML Creole \n This is <b>bold</b>\n  This is <i>italics</i>\n  This is <font:monospaced>monospaced</font>\n  This is <s>stroked</s>\n  This is <u>underlined</u>\n  This is <w>waved</w>\n  This is <s:green>stroked</s>\n  This is <u:red>underlined</u>\n  This is <w:#0000FF>waved</w>\n  -- other examples --\n  This is <color:blue>Blue</color>\n  This is <back:orange>Orange background</back>\n  This is <size:20>big</size>\n}|{^Creole line\nYou can have horizontal line\n----\nOr double line\n====\nOr strong line\n____\nOr dotted line\n..My title..\nOr dotted title\n//and title... //\n==Title==\nOr double-line title\n--Another title--\nOr single-line title\nEnjoy!\n}|{^Creole list item\n**test list 1**\n* Bullet list\n* Second item\n** Sub item\n*** Sub sub item\n* Third item\n----\n**test list 2**\n# Numbered list\n# Second item\n## Sub item\n## Another sub item\n# Third item\n}|{^Mix on salt\n  ==<color:Blue>Just plain text\n  [This is my default button]\n  [<b><color:green>This is my green button]\n  [ ---<color:#9a9a9a>This is my disabled button-- ]\n  []  <size:20><color:red>Unchecked box\n  [X] <color:green>Checked box\n  \"//Enter text here//   \"\n  ^This is a droplist^\n  ^<color:#9a9a9a>This is a disabled droplist^\n  ^<b><color:red>This is a red droplist^\n}}\n@endsalt\nPseudo sprite [<<, >>]\nUsing << and >> you can define a pseudo-sprite or sprite-like drawing and reusing it latter.\n@startsalt\n {\n [X] checkbox|[] checkbox\n () radio | (X) radio\n This is a text|[This is my button]|This is another text\n \"A field\"|\"Another long Field\"|[A button]\n <<folder\n ............\n .XXXXX......\n .X...X......\n .XXXXXXXXXX.\n .X........X.\n .X........X.\n .X........X.\n .X........X.\n .XXXXXXXXXX.\n ............\n >>|<color:blue>other folder|<<folder>>\n^Droplist^\n}\n@endsalt\nOpenIconic\nOpenIconic is a very nice open source icon set. Those icons have been integrated into the creole parser, so you can use them out-of-the-box. You can use the following syntax: <&ICON_NAME>.\n@startsalt\n{\n  Login<&person> | \"MyName   \"\n  Password<&key> | \"****     \"\n  [Cancel <&circle-x>] | [OK <&account-login>]\n}\n@endsalt\nInclude Salt \"on activity diagram\"\n@startuml\n(*) --> \"\n{{\nsalt\n{+\n<b>an example\nchoose one option\n()one\n()two\n[ok]\n}\n}}\n\" as choose\n\nchoose -right-> \"\n{{\nsalt\n{+\n<b>please wait\noperation in progress\n<&clock>\n[cancel]\n}\n}}\n\" as wait\nwait -right-> \"\n{{\nsalt\n{+\n<b>success\ncongratulations!\n[ok]\n}\n}}\n\" as success\n\nwait -down-> \"\n{{\nsalt\n{+\n<b>error\nfailed, sorry\n[ok]\n}\n}}\n\"\n@enduml\n@startuml\n!unquoted procedure SALT($x)\n\"{{\nsalt\n%invoke_procedure(\"_\"+$x)\n}}\" as $x\n!endprocedure\n\n!procedure _choose()\n{+\n<b>an example\nchoose one option\n()one\n()two\n[ok]\n}\n!endprocedure\n\n!procedure _wait()\n{+\n<b>please wait\noperation in progress\n<&clock>\n[cancel]\n}\n!endprocedure\n\n!procedure _success()\n{+\n<b>success\ncongratulations!\n[ok]\n}\n!endprocedure\n\n!procedure _error()\n{+\n<b>error\nfailed, sorry\n[ok]\n}\n!endprocedure\n\n(*) --> SALT(choose)\n-right-> SALT(wait)\nwait -right-> SALT(success)\nwait -down-> SALT(error)\n@enduml\nInclude salt \"on while condition of activity diagram\"\nYou can include salt on while condition of activity diagram.\n@startuml\nstart\nwhile (\\n{{\\nsalt\\n{+\\nPassword | \"****     \"\\n[Cancel] | [  OK   ]}\\n}}\\n) is (Incorrect)\n  :log attempt;\n  :attempt_count++;\n  if (attempt_count > 4) then (yes)\n    :increase delay timer;\n    :wait for timer to expire;\n  else (no)\n  endif\nendwhile (correct)\n:log request;\n:disable service;\n@enduml\nInclude salt \"on repeat while condition of activity diagram\"\nYou can include salt on \'repeat while\' condition of activity diagram.\n@startuml\nstart\nrepeat :read data;\n  :generate diagrams;\nrepeat while (\\n{{\\nsalt\\n{^\"Next step\"\\n  Do you want to continue? \\n[Yes]|[No]\\n}\\n}}\\n)\nstop\n@enduml';
