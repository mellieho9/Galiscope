export const plantumlRules =
  'IMPORTANT NOTE: \nFor names with more than 2 words, use _ to connect words. For example: participant South_Korean, Han_et_al....\nAlways finish the line first before moving onto new line.\n' +
  '\nSequence Diagram: Participants:\nparticipant: Basic participant.\nactor: Stick figure representing a user or external system.\nboundary, control, entity, database, collections, queue: Specialized participant types with unique icons.\nUse as to alias participants for clarity and space saving.\nExample: participant My_User as U\nMessages:\n->: Solid arrow for a message.\n-->: Dotted arrow.\n<- and <--: Reverse arrows for responses.\n-[#color]>: Colored arrows.\nExample: U -> Server: Login Request\nInteractions:\nactivate: Show lifeline activation.\ndeactivate: Show lifeline deactivation.\ncreate: Show object creation.\ndestroy: Show object destruction.\n++, --, **, !!: Shortcuts for activation, deactivation, creation, and destruction.\nExample: Server -> Database ++: Query\nGroups:\nalt/else, opt, loop, par, break, critical, group: Different group types for conditional logic, loops, and parallel processing.\nExample: alt successful login\nNotes:\nnote left/right/top/bottom of: Place notes next to participants.\nnote over: Place notes over participants.\nhnote/rnote: Hexagonal and rectangular notes.\nExample: note right of U: User enters credentials\nBasic message:\nExample:\n@startuml\nAlice_Kan -> Bob: Authentication Request\nBob_Kan --> nAlice_Kan: Authentication Response\n@enduml\nParticipants with aliases and colors:\n@startuml\nactor nBob_Kan #red\nparticipant Alice_Kan as A #99FF99\nA->Bob_Kan: Authentication Request\nBob_Kan->A: Authentication Response\n@enduml\nMessage to self:\nExample:\n@startuml\nAlice_Kan -> Alice_Kan: This is a signal to self.\\nIt also demonstrates\\nmultiline \\ntext\n@enduml\nGroup with alt/else:\nExample:\n@startuml\nAlice_Kan -> Bob_Kan: Authentication Request\n\nalt successful case\n    Bob_Kan -> Alice_Kan: Authentication Accepted\nelse some kind of failure\n    Bob_Kan -> Alice_Kan: Authentication Failure\nend\n@enduml\nNotes:\nExample:\n@startuml\nAlice_Kan->Bob_Kan : hello note left: this is a first note\n\nBob_Kan->Alice_Kan : ok note right: this is another note\n@enduml\n' +
  '\nClass Diagram: Declaring element\n@startuml\nabstract        abstract\nabstract class  \"abstract class\"\nannotation      annotation\ncircle          circle\n()              circle_short_form\nclass           class\nclass           class_stereo  <<stereotype>>\ndiamond         diamond\n<>              diamond_short_form\nentity          entity\nenum            enum\nexception       exception\ninterface       interface\nmetaclass       metaclass\nprotocol        protocol\nstereotype      stereotype\nstruct          struct\n@enduml\nRelations between classes\nExtension	<|--\nComposition	*--\nAggregation	o--\n@startuml\nClass01 <|-- Class02\nClass03 *-- Class04\nClass05 o-- Class06\nClass07 .. Class08\nClass09 -- Class10\n@enduml\n\n@startuml\nClass11 <|.. Class12\nClass13 --> Class14\nClass15 ..> Class16\nClass17 ..|> Class18\nClass19 <--* Class20\n@enduml\n@startuml\nClass21 #-- Class22\nClass23 x-- Class24\nClass25 }-- Class26\nClass27 +-- Class28\nClass29 ^-- Class30\n@enduml\nLabel on relations\nIt is possible to add a label on the relation, using :, followed by the text of the label.\nFor cardinality, you can use double-quotes \"\" on each side of the relation\n@startuml\n\nClass01 \"1\" *-- \"many\" Class02 : contains\n\nClass03 o-- Class04 : aggregation\n\nClass05 --> \"1\" Class06\n\n@enduml\nYou can add an extra arrow pointing at one object showing which object acts on the other object, using < or > at the begin or at the end of the label.\n@startuml\nclass Car\n\nDriver - Car : drives >\nCar *- Wheel : have 4 >\nCar -- Person : < owns\n\n@enduml\nUsing non-letters in element names and relation labels\nIf you want to use non-letters in the class (or enum...) display name, you can either :\nUse the as keyword in the class definition to assign an alias\nPut quotes \"\" around the class name\n@startuml\nclass \"This is my class\" as class1\nclass class2 as \"It works this way too\"\n\nclass2 *-- \"foo/dummy\" : use\n@enduml\nStarting names with $\nNote that names starting with $ cannot be hidden or removed later, because hide and remove command will consider the name a $tag instead of a component name. To later remove such elements they must have an alias or must be tagged.\n@startuml\nclass $C1\nclass $C2 $C2\nclass \"$C2\" as dollarC2\nremove $C1\nremove $C2\nremove dollarC2\n@enduml\nAlso note that names starting with $ are valid, but to assign an alias to such element the name must be put between quotes \"\".\n\nAdding methods\nTo declare fields and methods, you can use the symbol : followed by the field or method name.\nThe system checks for parenthesis to choose between methods and fields.\n@startuml\nObject <|-- ArrayList\n\nObject : equals()\nArrayList : Object[] elementData\nArrayList : size()\n\n@enduml\nIt is also possible to group between brackets {} all fields and methods.\nNote that the syntax is highly flexible about type/name order.@startuml\nclass Dummy {\n  String data\n  void methods()\n}\n\nclass Flight {\n   flightNumber : Integer\n   departureTime : Date\n}\n@enduml\nYou can use {field} and {method} modifiers to override default behaviour of the parser about fields and methods.\n@startuml\nclass Dummy {\n  {field} A field (despite parentheses)\n  {method} Some method\n}\n\n@enduml\nDefining visibility\nWhen you define methods or fields, you can use characters to define the visibility of the corresponding item:\n-			private\n#			protected\n~			package private\n+			public\n@startuml\n\nclass Dummy {\n -field1\n #field2\n ~method1()\n +method2()\n}\n\n@enduml\nYou can turn off this feature using the skinparam classAttributeIconSize 0 command :\n@startuml\nskinparam classAttributeIconSize 0\nclass Dummy {\n -field1\n #field2\n ~method1()\n +method2()\n}\n\n@enduml\nVisibility indicators are optional and can be ommitted individualy without turning off the icons globally using skinparam classAttributeIconSize 0.\n@startuml\nclass Dummy {\n field1\n field2\n method1()\n method2()\n}\n\n@enduml\nIn such case if you to use methods or fields that start with -, #, ~ or + characters such as a destructor in some languages for Dummy class ~Dummy(), escape the first character with a \\ character:\n@startuml\nclass Dummy {\n field1\n \\~Dummy()\n method1()\n}\n\n@enduml\nAbstract and Static\nYou can define static or abstract methods or fields using the {static} or {abstract} modifier.\nThese modifiers can be used at the start or at the end of the line. You can also use {classifier} instead of {static}.\n@startuml\nclass Dummy {\n  {static} String id\n  {abstract} void methods()\n}\n@enduml\nAdvanced class body\nBy default, methods and fields are automatically regrouped by PlantUML. You can use separators to define your own way of ordering fields and methods. The following separators are possible : --..==__.\nYou can also use titles within the separators:\n@startuml\n\nclass Foo1 {\n  You can use\n  several lines\n  ..\n  as you want\n  and group\n  ==\n  things together.\n  __\n  You can have as many groups\n  as you want\n  --\n  End of class\n}\n\nclass User {\n  .. Simple Getter ..\n  + getName()\n  + getAddress()\n  .. Some setter ..\n  + setName()\n  __ private data __\n  int age\n  -- encrypted --\n  String password\n}\n\n@enduml\nNotes and stereotypes\nStereotypes are defined with the class keyword, << and >>.\nYou can also define notes using note left of , note right of , note top of , note bottom of keywords.\nYou can also define a note on the last defined class using note left, note right, note top, note bottom.\nA note can be also define alone with the note keywords, then linked to other objects using the .. symbol.\n@startuml\n\nclass Object << general >>\nObject <|--- ArrayList\n\nnote top of Object : In java, every class\\nextends this one.\n\nnote \"This is a floating note\" as N1\nnote \"This note is connected\\nto several objects.\" as N2\nObject .. N2\nN2 .. ArrayList\n\nclass Foo\nnote left: On last defined class\n\n@enduml\nMore on notes\nIt is also possible to use few HTML tags (See Creole expression) like :\n<b>\n<u>\n<i>\n<s>, <del>, <strike>\n<font color=\"#AAAAAA\"> or <font color=\"colorName\">\n<color:#AAAAAA> or <color:colorName>\n<size:nn> to change font size\n<img src=\"file\"> or <img:file>: the file must be accessible by the filesystem\nYou can also have a note on several lines.\nYou can also define a note on the last defined class using note left, note right, note top, note bottom.\n@startuml\n\nclass Foo\nnote left: On last defined class\n\nnote top of Foo\n  In java, <size:18>every</size> <u>class</u>\n  <b>extends</b>\n  <i>this</i> one.\nend note\n\nnote as N1\n  This note is <u>also</u>\n  <b><color:royalBlue>on several</color>\n  <s>words</s> lines\n  And this is hosted by <img:sourceforge.jpg>\nend note\n\n@enduml\nNote on field (field, attribute, member) or method\nIt is possible to add a note on field (field, attribute, member) or on method.\nConstraint\nThis cannot be used with top or bottom(only left and right are implemented)\nThis cannot be used with namespaceSeparator ::\nNote on field or method\n@startuml\nclass A {\n{static} int counter\n+void {abstract} start(int timeout)\n}\nnote right of A::counter\n  This member is annotated\nend note\nnote right of A::start\n  This method is now explained in a UML note\nend note\n@enduml\nNote on method with the same name\n@startuml\nclass A {\n{static} int counter\n+void {abstract} start(int timeoutms)\n+void {abstract} start(Duration timeout)\n}\nnote left of A::counter\n  This member is annotated\nend note\nnote right of A::\"start(int timeoutms)\"\n  This method with int\nend note\nnote right of A::\"start(Duration timeout)\"\n  This method with Duration\nend note\n@enduml\nNote on links\nIt is possible to add a note on a link, just after the link definition, using note on link.\nYou can also use note left on link, note right on link, note top on link, note bottom on link if you want to change the relative position of the note with the label.\n@startuml\n\nclass Dummy\nDummy --> Foo : A link\nnote on link #red: note that is red\n\nDummy --> Foo2 : Another link\nnote right on link #blue\nthis is my note on right link\nand in blue\nend note\n\n@enduml\nAbstract class and interface\nYou can declare a class as abstract using abstract or abstract class keywords.\nThe class will be printed in italic.\nYou can use the interface, annotation and enum keywords too\n@startuml\n\nabstract class AbstractList\nabstract AbstractCollection\ninterface List\ninterface Collection\n\nList <|-- AbstractList\nCollection <|-- AbstractCollection\n\nCollection <|- List\nAbstractCollection <|- AbstractList\nAbstractList <|-- ArrayList\n\nclass ArrayList {\n  Object[] elementData\n  size()\n}\n\nenum TimeUnit {\n  DAYS\n  HOURS\n  MINUTES\n}\n\nannotation SuppressWarnings\n\nannotation Annotation {\n  annotation with members\n  String foo()\n  String bar()\n}\n\n\n@enduml\nHide attributes, methods...\nYou can parameterize the display of classes using the hide/show command.\nThe basic command is: hide empty members. This command will hide attributes or methods if they are empty.\nInstead of empty members, you can use:\nempty fields or empty attributes for empty fields,\nempty methods for empty methods,\nfields or attributes which will hide fields, even if they are described,\nmethods which will hide methods, even if they are described,\nmembers which will hide fields and methods, even if they are described,\ncircle for the circled character in front of class name,\nstereotype for the stereotype.\nYou can also provide, just after the hide or show keyword:\nclass for all classes,\ninterface for all interfaces,\nenum for all enums,\n<<foo1>> for classes which are stereotyped with foo1,\nan existing class name.\nYou can use several show/hide commands to define rules and exceptions.\n@startuml\n\nclass Dummy1 {\n  +myMethods()\n}\n\nclass Dummy2 {\n  +hiddenMethod()\n}\n\nclass Dummy3 <<Serializable>> {\nString name\n}\n\nhide members\nhide <<Serializable>> circle\nshow Dummy1 methods\nshow <<Serializable>> fields\n\n@enduml\nHide classes\nYou can also use the show/hide commands to hide classes.\nThis may be useful if you define a large !included file, and if you want to hide some classes after file inclusion.\n@startuml\n\nclass Foo1\nclass Foo2\n\nFoo2 *-- Foo1\n\nhide Foo2\n\n@enduml\nRemove classes\nYou can also use the remove commands to remove classes.\n@startuml\n\nclass Foo1\nclass Foo2\n\nFoo2 *-- Foo1\n\nremove Foo2\n\n@enduml\nHide, Remove or Restore tagged element or wildcard\nYou can put $tags (using $) on elements, then remove, hide or restore components either individually or by tags.\nBy default, all components are displayed:\n@startuml\nclass C1 $tag13\nenum E1\ninterface I1 $tag13\nC1 -- I1\n@enduml\nHide or Remove unlinked class\nBy default, all classes are displayed:\n@startuml\nclass C1\nclass C2\nclass C3\nC1 -- C2\n@enduml\nBut you can:\nhide @unlinked classes:\n@startuml\nclass C1\nclass C2\nclass C3\nC1 -- C2\n\nhide @unlinked\n@enduml\nor remove @unlinked classes:\n@startuml\nclass C1\nclass C2\nclass C3\nC1 -- C2\n\nremove @unlinked\n@enduml\nUse generics\nYou can also use bracket < and > to define generics usage in a class.\n@startuml\n\nclass Foo<? extends Element> {\n  int size()\n}\nFoo *- Element\n\n@enduml\nIt is possible to disable this drawing using skinparam genericDisplay old command.\nBack to topSpecific Spot\nUsually, a spotted character (C, I, E or A) is used for classes, interface, enum and abstract classes.\nBut you can define your own spot for a class when you define the stereotype, adding a single character and a color, like in this example:\n@startuml\n\nclass System << (S,#FF7700) Singleton >>\nclass Date << (D,orchid) >>\n@enduml\nPackages\nYou can define a package using the package keyword, and optionally declare a background color for your package (Using a html color code or name).\nNote that package definitions can be nested.\n@startuml\n\npackage \"Classic Collections\" #DDDDDD {\n  Object <|-- ArrayList\n}\n\npackage com.plantuml {\n  Object <|-- Demo1\n  Demo1 *- Demo2\n}\n\n@enduml\nPackages style\nThere are different styles available for packages.\nYou can specify them either by setting a default style with the command : skinparam packageStyle, or by using a stereotype on the package\n@startuml\nscale 750 width\npackage foo1 <<Node>> {\n  class Class1\n}\n\npackage foo2 <<Rectangle>> {\n  class Class2\n}\n\npackage foo3 <<Folder>> {\n  class Class3\n}\n\npackage foo4 <<Frame>> {\n  class Class4\n}\n\npackage foo5 <<Cloud>> {\n  class Class5\n}\n\npackage foo6 <<Database>> {\n  class Class6\n}\n\n@enduml\nYou can also define links between packages, like in the following example:\n@startuml\n\nskinparam packageStyle rectangle\n\npackage foo1.foo2 {\n}\n\npackage foo1.foo2.foo3 {\n  class Object\n}\n\nfoo1.foo2 +-- foo1.foo2.foo3\n\n@enduml\nLollipop interface\nYou can also define lollipops interface on classes, using the following syntax:\nbar ()- foo\nbar ()-- foo\nfoo -() bar\n@startuml\nclass foo\nbar ()- foo\n@enduml\nChanging arrows orientation\nBy default, links between classes have two dashes -- and are vertically oriented. It is possible to use horizontal link by putting a single dash (or dot) like this:\n@startuml\nRoom o- Student\nRoom *-- Chair\n@enduml\nYou can also change directions by reversing the link:\n@startuml\nStudent -o Room\nChair --* Room\n@enduml\nAssociation classes\nYou can define association class after that a relation has been defined between two classes, like in this example:\n@startuml\nclass Student {\n  Name\n}\nStudent \"0..*\" - \"1..*\" Course\n(Student, Course) .. Enrollment\n\nclass Enrollment {\n  drop()\n  cancel()\n}\n@enduml\n@startuml\nclass Student {\n  Name\n}\nStudent \"0..*\" -- \"1..*\" Course\n(Student, Course) . Enrollment\n\nclass Enrollment {\n  drop()\n  cancel()\n}\n@enduml\nAssociation on same class\n@startuml\nclass Station {\n    +name: string\n}\n\nclass StationCrossing {\n    +cost: TimeInterval\n}\n\n<> diamond\n\nStationCrossing . diamond\ndiamond - \"from 0..*\" Station\ndiamond - \"to 0..* \" Station\n@enduml\nBracketed relations (linking or arrow) style\nLine style\nIt also possible to have explicitly bold, dashed, dotted, hidden or plain relation, links or arrows:\nwithout label\n@startuml\ntitle Bracketed line style without label\nclass foo\nclass bar\nbar1 : [bold]  \nbar2 : [dashed]\nbar3 : [dotted]\nbar4 : [hidden]\nbar5 : [plain] \n\nfoo --> bar\nfoo -[bold]-> bar1\nfoo -[dashed]-> bar2\nfoo -[dotted]-> bar3\nfoo -[hidden]-> bar4\nfoo -[plain]-> bar5\n@enduml\nwith label\n@startuml\ntitle Bracketed line style with label\nclass foo\nclass bar\nbar1 : [bold]  \nbar2 : [dashed]\nbar3 : [dotted]\nbar4 : [hidden]\nbar5 : [plain] \n\nfoo --> bar          : ∅\nfoo -[bold]-> bar1   : [bold]\nfoo -[dashed]-> bar2 : [dashed]\nfoo -[dotted]-> bar3 : [dotted]\nfoo -[hidden]-> bar4 : [hidden]\nfoo -[plain]-> bar5  : [plain]\n\n@enduml\nGrouping inheritance arrow heads\nYou can merge all arrow heads using the skinparam groupInheritance, with a threshold as parameter.\nGroupInheritance 1 (no grouping)\n@startuml\nskinparam groupInheritance 1\n\nA1 <|-- B1\n\nA2 <|-- B2\nA2 <|-- C2\n\nA3 <|-- B3\nA3 <|-- C3\nA3 <|-- D3\n\nA4 <|-- B4\nA4 <|-- C4\nA4 <|-- D4\nA4 <|-- E4\n@enduml\nGroupInheritance 2 (grouping from 2)\n@startuml\nskinparam groupInheritance 2\n\nA1 <|-- B1\n\nA2 <|-- B2\nA2 <|-- C2\n\nA3 <|-- B3\nA3 <|-- C3\nA3 <|-- D3\n\nA4 <|-- B4\nA4 <|-- C4\nA4 <|-- D4\nA4 <|-- E4\n@enduml\nDisplay JSON Data on Class or Object diagram\nSimple example\n@startuml\nclass Class\nobject Object\njson JSON {\n   \"fruit\":\"Apple\",\n   \"size\":\"Large\",\n   \"color\": [\"Red\", \"Green\"]\n}\n@enduml\nPackages and Namespaces Enhancement\n@startuml\nclass A.B.C.D.Z {\n}\n@enduml\n@startuml\nset separator none\nclass A.B.C.D.Z {\n}\n@enduml\n@startuml\n!pragma useIntermediatePackages false\nclass A.B.C.D.Z {\n}\n@enduml\nQualified associations\nMinimal example\n@startuml\nclass class1\nclass class2\n\nclass1 [Qualifier] - class2\n@enduml\n\nAnother example\n@startuml\n    interface Map<K,V>\n    class HashMap<Long,Customer>\n\n    Map <|.. HashMap\n    Shop [customerId: long] ---> \"customer\\n1\" Customer\n    HashMap [id: Long] -r-> \"value\" Customer\n@enduml' +
  '\nActivity Diagram: Activities:\nLegacy: (*) for start/end, "Activity" for action, --> for transitions.\nNew: start, stop/end, :Activity; , -> for transitions.\nExample (new): start :Login;\nDecisions:\nLegacy: if, then, else, endif.\nNew: if (...) then (...), if (...) is (...) then (...), switch, case, endswitch.\nExample (new): if (password correct?) then (Success)\nLoops:\nLegacy: loop, end loop.\nNew: repeat/repeat while, while/endwhile\nExample (new): repeat :Process data;\nBasic activity with start and end:\nExample (new):\n@startuml\nstart\n:Activity1;\n:Activity2;\nstop\n@enduml\nDecision with if/else:\nExample (new):\n@startuml\nstart\nif (condition) then (yes)\n    :Action1;\nelse (no)\n    :Action2;\nendif\nstop\n@enduml\nPlantuml\nFork and join:\nExample (new):\n@startuml\nstart \nfork\n    :Activity1;\nfork again\n    :Activity2;\nend fork\n:Activity3; \nstop\n@enduml\n Example: @startuml\n!pragma teoz true\n:Hello world;\n:This is defined on\nseveral **lines**;\n@enduml' +
  '\nMind Map: OrgMode syntax\nThis syntax is compatible with OrgMode\n@startmindmap\n* Debian\n** Ubuntu\n*** Linux Mint\n*** Kubuntu\n*** Lubuntu\n*** KDE Neon\n** LMDE\n** SolydXK\n** SteamOS\n** Raspbian with a very long name\n*** <s>Raspmbc</s> => OSMC\n*** <s>Raspyfi</s> => Volumio\n@endmindmap\n\nMarkdown syntax\nThis syntax is compatible with Markdown\n@startmindmap\n* root node\n\t* some first level node\n\t\t* second level node\n\t\t* another second level node\n\t* another first level node\n@endmindmap\n\nArithmetic notation\nYou can use the following notation to choose diagram side.\n@startmindmap\n+ OS\n++ Ubuntu\n+++ Linux Mint\n+++ Kubuntu\n+++ Lubuntu\n+++ KDE Neon\n++ LMDE\n++ SolydXK\n++ SteamOS\n++ Raspbian\n-- Windows 95\n-- Windows 98\n-- Windows NT\n--- Windows 8\n--- Windows 10\n@endmindmap\n\nMultilines\nYou can use : and ; to have multilines box.\n@startmindmap\n* Class Templates\n**:Example 1\n<code>\ntemplate <typename T>\nclass cname{\nvoid f1()<U+003B>\n...\n}\n</code>\n;\n**:Example 2\n<code>\nother template <typename T>\nclass cname{\n...\n</code>\n;\n@endmindmap\n@startmindmap\n+ root\n**:right_1.1\nright_1.2;\n++ right_2\n\nleft side\n\n-- left_1\n-- left_2\n**:left_3.1\nleft_3.2;\n@endmindmap\n\nMultiroot Mindmap\nYou can create multiroot mindmap, as:\n@startmindmap\n* Root 1\n** Foo\n** Bar\n* Root 2\n** Lorem\n** Ipsum\n@endmindmap\n\nColors\nWith inline color\nOrgMode syntax mindmap\n@startmindmap\n*[#Orange] Colors\n**[#lightgreen] Green\n**[#FFBBCC] Rose\n**[#lightblue] Blue\n@endmindmap\n\nArithmetic notation syntax mindmap\n@startmindmap\n+[#Orange] Colors\n++[#lightgreen] Green\n++[#FFBBCC] Rose\n--[#lightblue] Blue\n@endmindmap\n\nMarkdown syntax mindmap\n@startmindmap\n*[#Orange] root node\n *[#lightgreen] some first level node\n  *[#FFBBCC] second level node\n  *[#lightblue] another second level node\n *[#lightgreen] another first level node\n@endmindmap\n\nRemoving box\nYou can remove the box drawing using an underscore.\n@startmindmap\n* root node\n** some first level node\n***_ second level node\n***_ another second level node\n***_ foo\n***_ bar\n***_ foobar\n** another first level node\n@endmindmap\n@startmindmap\n*_ root node\n**_ some first level node\n***_ second level node\n***_ another second level node\n***_ foo\n***_ bar\n***_ foobar\n**_ another first level node\n@endmindmap\n@startmindmap\n+ root node\n++ some first level node\n+++_ second level node\n+++_ another second level node\n+++_ foo\n+++_ bar\n+++_ foobar\n++_ another first level node\n-- some first right level node\n--_ another first right level node\n@endmindmap\n\nChanging diagram direction\n@startmindmap\n* count\n** 100\n*** 101\n*** 102\n** 200\n\nleft side\n\n** A\n*** AA\n*** AB\n** B\n@endmindmap\n\nexample:\n@startmindmap\ncaption figure 1\ntitle My super title\n\n* <&flag>Debian\n** <&globe>Ubuntu\n*** Linux Mint\n*** Kubuntu\n*** Lubuntu\n*** KDE Neon\n** <&graph>LMDE\n** <&pulse>SolydXK\n** <&people>SteamOS\n** <&star>Raspbian with a very long name\n*** <s>Raspmbc</s> => OSMC\n*** <s>Raspyfi</s> => Volumio\n\nheader\nMy super header\nendheader\n\ncenter footer My super footer\n\nlegend right\n  Short\n  legend\nendlegend\n@endmindmap\n\nChanging style\nnode, depth\n@startmindmap\n<style>\nmindmapDiagram {\n    node {\n        BackgroundColor lightGreen\n    }\n    :depth(1) {\n      BackGroundColor white\n    }\n}\n</style>\n* Linux\n** NixOS\n** Debian\n*** Ubuntu\n**** Linux Mint\n**** Kubuntu\n**** Lubuntu\n**** KDE Neon\n@endmindmap\n\nWord Wrap\nUsing MaximumWidth setting you can control automatic word wrap. Unit used is pixel.\n@startmindmap\n\n\n<style>\nnode {\n    Padding 12\n    Margin 3\n    HorizontalAlignment center\n    LineColor blue\n    LineThickness 3.0\n    BackgroundColor gold\n    RoundCorner 40\n    MaximumWidth 100\n}\n\nrootNode {\n    LineStyle 8.0;3.0\n    LineColor red\n    BackgroundColor white\n    LineThickness 1.0\n    RoundCorner 0\n    Shadowing 0.0\n}\n\nleafNode {\n    LineColor gold\n    RoundCorner 0\n    Padding 3\n}\n\narrow {\n    LineStyle 4\n    LineThickness 0.5\n    LineColor green\n}\n</style>\n\n* Hi =)\n** sometimes i have node in wich i want to write a long text\n*** this results in really huge diagram\n**** of course, i can explicit split with a\nnew line\n**** but it could be cool if PlantUML was able to split long lines, maybe with an option \n\n@endmindmap\n\nCreole on Mindmap diagram\n@startmindmap\n* Creole on Mindmap\nleft side\n**:==Creole\n  This is **bold**\n  This is //italics//\n  This is \"\"monospaced\"\"\n  This is --stricken-out--\n  This is __underlined__\n  This is ~~wave-underlined~~\n--test Unicode and icons--\n  This is <U+221E> long\n  This is a <&code> icon\n  Use image : <img:http://plantuml.com/logo3.png>\n;\n**: <b>HTML Creole \n  This is <b>bold</b>\n  This is <i>italics</i>\n  This is <font:monospaced>monospaced</font>\n  This is <s>stroked</s>\n  This is <u>underlined</u>\n  This is <w>waved</w>\n  This is <s:green>stroked</s>\n  This is <u:red>underlined</u>\n  This is <w:#0000FF>waved</w>\n-- other examples --\n  This is <color:blue>Blue</color>\n  This is <back:orange>Orange background</back>\n  This is <size:20>big</size>\n;\nright side\n**:==Creole line\nYou can have horizontal line\n----\nOr double line\n====\nOr strong line\n____\nOr dotted line\n..My title..\nOr dotted title\n//and title... //\n==Title==\nOr double-line title\n--Another title--\nOr single-line title\nEnjoy!;\n**:==Creole list item\n**test list 1**\n* Bullet list\n* Second item\n** Sub item\n*** Sub sub item\n* Third item\n----\n**test list 2**\n# Numbered list\n# Second item\n## Sub item\n## Another sub item\n# Third item\n;\n@endmindmap\n' +
  '\nState Diagram: Simple State\nYou can use [*] for the starting point and ending point of the state diagram.\nUse --> for arrows.\n@startuml\n\n[*] --> State1\nState1 --> [*]\nState1 : this is a string\nState1 : this is another string\n\nState1 -> State2\nState2 --> [*]\n\n@enduml\nChange state rendering\nYou can use hide empty description to render state as simple box.\n@startuml\nhide empty description\n[*] --> State1\nState1 --> [*]\nState1 : this is a string\nState1 : this is another string\n\nState1 -> State2\nState2 --> [*]\n@enduml\nComposite state\nA state can also be composite. You have to define it using the state keywords and brackets.\nInternal sub-state\n@startuml\nscale 350 width\n[*] --> NotShooting\n\nstate NotShooting {\n  [*] --> Idle\n  Idle --> Configuring : EvConfig\n  Configuring --> Idle : EvConfig\n}\n\nstate Configuring {\n  [*] --> NewValueSelection\n  NewValueSelection --> NewValuePreview : EvNewValue\n  NewValuePreview --> NewValueSelection : EvNewValueRejected\n  NewValuePreview --> NewValueSelection : EvNewValueSaved\n\n  state NewValuePreview {\n     State1 -> State2\n  }\n\n}\n@enduml\nSub-state to sub-state\n@startuml\nstate A {\n  state X {\n  }\n  state Y {\n  }\n}\n \nstate B {\n  state Z {\n  }\n}\n\nX --> Z\nZ --> Y\n@enduml\nLong name\nYou can also use the state keyword to use long description for states.\n@startuml\nscale 600 width\n\n[*] -> State1\nState1 --> State2 : Succeeded\nState1 --> [*] : Aborted\nState2 --> State3 : Succeeded\nState2 --> [*] : Aborted\nstate State3 {\n  state "Accumulate Enough Data\nLong State Name" as long1\n  long1 : Just a test\n  [*] --> long1\n  long1 --> long1 : New Data\n  long1 --> ProcessData : Enough Data\n}\nState3 --> State3 : Failed\nState3 --> [*] : Succeeded / Save Result\nState3 --> [*] : Aborted\n\n@enduml\nHistory [[H], [H*]]\nYou can use [H] for the history and [H*] for the deep history of a substate.\n@startuml\n[*] -> State1\nState1 --> State2 : Succeeded\nState1 --> [*] : Aborted\nState2 --> State3 : Succeeded\nState2 --> [*] : Aborted\nstate State3 {\n  state "Accumulate Enough Data" as long1\n  long1 : Just a test\n  [*] --> long1\n  long1 --> long1 : New Data\n  long1 --> ProcessData : Enough Data\n  State2 --> [H]: Resume\n}\nState3 --> State2 : Pause\nState2 --> State3[H*]: DeepResume\nState3 --> State3 : Failed\nState3 --> [*] : Succeeded / Save Result\nState3 --> [*] : Aborted\n@enduml\n\nFork [fork, join]\nYou can also fork and join using the <<fork>> and <<join>> stereotypes.\n@startuml\n\nstate fork_state <<fork>>\n[*] --> fork_state\nfork_state --> State2\nfork_state --> State3\n\nstate join_state <<join>>\nState2 --> join_state\nState3 --> join_state\njoin_state --> State4\nState4 --> [*]\n\n@enduml\nConcurrent state [--, ||]\nYou can define concurrent state into a composite state using either -- or || symbol as separator.\nHorizontal separator --\n\n@startuml\n[*] --> Active\n\nstate Active {\n  [*] -> NumLockOff\n  NumLockOff --> NumLockOn : EvNumLockPressed\n  NumLockOn --> NumLockOff : EvNumLockPressed\n  --\n  [*] -> CapsLockOff\n  CapsLockOff --> CapsLockOn : EvCapsLockPressed\n  CapsLockOn --> CapsLockOff : EvCapsLockPressed\n  --\n  [*] -> ScrollLockOff\n  ScrollLockOff --> ScrollLockOn : EvScrollLockPressed\n  ScrollLockOn --> ScrollLockOff : EvScrollLockPressed\n}\n\n@enduml\nVertical separator ||\n@startuml\n[*] --> Active\n\nstate Active {\n  [*] -> NumLockOff\n  NumLockOff --> NumLockOn : EvNumLockPressed\n  NumLockOn --> NumLockOff : EvNumLockPressed\n  ||\n  [*] -> CapsLockOff\n  CapsLockOff --> CapsLockOn : EvCapsLockPressed\n  CapsLockOn --> CapsLockOff : EvCapsLockPressed\n  ||\n  [*] -> ScrollLockOff\n  ScrollLockOff --> ScrollLockOn : EvScrollLockPressed\n  ScrollLockOn --> ScrollLockOff : EvCapsLockPressed\n}\n\n@enduml\nConditional [choice]\nThe stereotype <<choice>> can be used to use conditional state.\n@startuml\nstate "Req(Id)" as ReqId <<sdlreceive>>\nstate "Minor(Id)" as MinorId\nstate "Major(Id)" as MajorId\n \nstate c <<choice>>\n \nIdle --> ReqId\nReqId --> c\nc --> MinorId : [Id <= 10]\nc --> MajorId : [Id > 10]\n@enduml\nStereotypes full example [start, choice, fork, join, end]\n@startuml\nstate start1  <<start>>\nstate choice1 <<choice>>\nstate fork1   <<fork>>\nstate join2   <<join>>\nstate end3    <<end>>\n\n[*]     --> choice1 : from start\nto choice\nstart1  --> choice1 : from start stereo\nto choice\n\nchoice1 --> fork1   : from choice\nto fork\nchoice1 --> join2   : from choice\nto join\nchoice1 --> end3    : from choice\nto end stereo\n\nfork1   ---> State1 : from fork\nto state\nfork1   --> State2  : from fork\nto state\n\nState2  --> join2   : from state\nto join\nState1  --> [*]     : from state\nto end\n\njoin2   --> [*]     : from join\nto end\n@enduml\nPoint [entryPoint, exitPoint]\nYou can add point with <<entryPoint>> and <<exitPoint>> stereotypes:\n@startuml\nstate Somp {\n  state entry1 <<entryPoint>>\n  state entry2 <<entryPoint>>\n  state sin\n  entry1 --> sin\n  entry2 -> sin\n  sin -> sin2\n  sin2 --> exitA <<exitPoint>>\n}\n\n[*] --> entry1\nexitA --> Foo\nFoo1 -> entry2\n@enduml\nPin [inputPin, outputPin]\nYou can add pin with <<inputPin>> and <<outputPin>> stereotypes:\n@startuml\nstate Somp {\n  state entry1 <<inputPin>>\n  state entry2 <<inputPin>>\n  state sin\n  entry1 --> sin\n  entry2 -> sin\n  sin -> sin2\n  sin2 --> exitA <<outputPin>>\n}\n\n[*] --> entry1\nexitA --> Foo\nFoo1 -> entry2\n@enduml\nExpansion [expansionInput, expansionOutput]\nYou can add expansion with <<expansionInput>> and <<expansionOutput>> stereotypes:\n@startuml\nstate Somp {\n  state entry1 <<expansionInput>>\n  state entry2 <<expansionInput>>\n  state sin\n  entry1 --> sin\n  entry2 -> sin\n  sin -> sin2\n  sin2 --> exitA <<expansionOutput>>\n}\n\n[*] --> entry1\nexitA --> Foo\nFoo1 -> entry2\n@enduml\nArrow direction\nYou can use -> for horizontal arrows. It is possible to force arrow direction using the following syntax:\n-down-> or -->\n-right-> or ->(default arrow)\n-left->\n-up->\n@startuml\n\n[*] -up-> First\nFirst -right-> Second\nSecond --> Third\nThird -left-> Last\n\n@enduml\nNote on link\nYou can put notes on state-transition or link, with note on link keyword.\n@startuml\n[*] -> State1\nState1 --> State2\nnote on link \n  this is a state-transition note \nend note\n@enduml\n@startuml\n\n[*] --> NotShooting\n\nstate "Not Shooting State" as NotShooting {\n  state "Idle mode" as Idle\n  state "Configuring mode" as Configuring\n  [*] --> Idle\n  Idle --> Configuring : EvConfig\n  Configuring --> Idle : EvConfig\n}\n\nnote right of NotShooting : This is a note on a composite state\n\n@enduml\nAlias\nWith State you can use alias, like\n@startuml\nstate alias1 \nstate "alias2"\nstate "long name" as alias3\nstate alias4 as "long name"\n\nalias1 : ""state alias1""\nalias2 : ""state "alias2""\nalias3 : ""state "long name" as alias3""\nalias4 : ""state alias4 as "long name"""\n\nalias1 -> alias2\nalias2 -> alias3\nalias3 -> alias4\n@enduml\n@startuml\nstate alias1 : ""state alias1""\nstate "alias2" : ""state "alias2""\nstate "long name" as alias3 : ""state "long name" as alias3""\nstate alias4 as "long name" : ""state alias4 as "long name"""\n\nalias1 -> alias2\nalias2 -> alias3\nalias3 -> alias4\n@enduml\nDisplay JSON Data on State diagram\nSimple example\n@startuml\nstate "A" as stateA\nstate "C" as stateC {\n state B\n}\n\njson jsonJ {\n   "fruit":"Apple",\n   "size":"Large",\n   "color": [\"Red\", \"Green\"]\n}\n@enduml\n \nExample: @startuml\n[*] --> State1\nState1 --> [*]\nState1 : this is a string\nState1 : this is another string\n\nState1 -> State2\nState2 --> [*]\n@enduml'
