export const plantumlRules =
  'IMPORTANT NOTE: for names with more than 2 words, use _ to connect words. For example: participant South_Korean, Han_et_al....' +
  'sequence diagram: Participants:\nparticipant: Basic participant.\nactor: Stick figure representing a user or external system.\nboundary, control, entity, database, collections, queue: Specialized participant types with unique icons.\nUse as to alias participants for clarity and space saving.\nExample: participant My_User as U\nMessages:\n->: Solid arrow for a message.\n-->: Dotted arrow.\n<- and <--: Reverse arrows for responses.\n-[#color]>: Colored arrows.\nExample: U -> Server: Login Request\nInteractions:\nactivate: Show lifeline activation.\ndeactivate: Show lifeline deactivation.\ncreate: Show object creation.\ndestroy: Show object destruction.\n++, --, **, !!: Shortcuts for activation, deactivation, creation, and destruction.\nExample: Server -> Database ++: Query\nGroups:\nalt/else, opt, loop, par, break, critical, group: Different group types for conditional logic, loops, and parallel processing.\nExample: alt successful login\nNotes:\nnote left/right/top/bottom of: Place notes next to participants.\nnote over: Place notes over participants.\nhnote/rnote: Hexagonal and rectangular notes.\nExample: note right of U: User enters credentials\nBasic message:\nExample:\n@startuml\nAlice_Kan -> Bob: Authentication Request\nBob_Kan --> nAlice_Kan: Authentication Response\n@enduml\nParticipants with aliases and colors:\n@startuml\nactor nBob_Kan #red\nparticipant Alice_Kan as A #99FF99\nA->Bob_Kan: Authentication Request\nBob_Kan->A: Authentication Response\n@enduml\nMessage to self:\nExample:\n@startuml\nAlice_Kan -> Alice_Kan: This is a signal to self.\\nIt also demonstrates\\nmultiline \\ntext\n@enduml\nGroup with alt/else:\nExample:\n@startuml\nAlice_Kan -> Bob_Kan: Authentication Request\n\nalt successful case\n    Bob_Kan -> Alice_Kan: Authentication Accepted\nelse some kind of failure\n    Bob_Kan -> Alice_Kan: Authentication Failure\nend\n@enduml\nNotes:\nExample:\n@startuml\nAlice_Kan->Bob_Kan : hello note left: this is a first note\n\nBob_Kan->Alice_Kan : ok note right: this is another note\n@enduml\n' +
  'use case diagram: Use Cases:\n(Use Case) or usecase: Defines a use case.\nExample: (Login)\nActors:\n:Actor: or actor: Defines an actor.\nExample: :User:\nRelationships:\n-->: Association between actor and use case.\n<|--: Generalization (inheritance).\n<..: Extend relationship.\nExample: User --> (Login)\nBasic use case and actor:\nExample:\n@startuml\n:Main Admin: as Admin\n(Use the application) as (Use)\n\nUser -> (Start)\nUser --> (Use)\nAdmin ---> (Use)\n@enduml\nExtend relationship:\nExample:\n@startuml\n:Main Admin: as Admin\n(Use the application) as (Use)\n\nUser <|-- Admin\n(Start) <|-- (Use)\n@enduml\nPlantuml\nPackage:\nExample:\n@startuml\nleft to right direction\nactor Guest as g\npackage Professional {\n    actor Chef as c\n    actor "Food Critic" as fc\n}\npackage Restaurant {\n    usecase "Eat Food" as UC1\n    usecase "Pay for Food" as UC2\n}\nfc --> UC4\ng --> UC1\ng --> UC2\n@enduml\n' +
  'class diagram: Classes:\nclass: Defines a class.\nabstract class or abstract: Defines an abstract class.\ninterface: Defines an interface.\nExample: class User\nMembers:\n+: Public member.\n-: Private member.\n#: Protected member.\n~: Package private member.\nExample: +name: String\nRelationships:\n<|--: Inheritance.\n*--: Composition.\no--: Aggregation.\n..: Dotted line for any relationship.\nExample: User *-- Address\n' +
  'object diagram: Objects:\nobject: Defines an object.\nExample: object user1\nRelationships and other features are similar to class diagrams.\nExample:\n@startuml\nclass Car {\n    -model: string\n    -color: string\n\n    +start()\n    +stop()\n}\n@enduml\nPlantuml\nInheritance:\nExample:\n@startuml\nabstract class AbstractList\ninterface List\nList <|-- AbstractList\nAbstractList <|-- ArrayList\n\nclass ArrayList {\n    Object[] elementData\n    size()\n}\n@enduml\nPlantuml\nComposition:\nExample:\n@startuml\nclass House\nclass Room \nHouse *-- Room\n@enduml\n' +
  'activity diagram: Activities:\nLegacy: (*) for start/end, "Activity" for action, --> for transitions.\nNew: start, stop/end, :Activity; , -> for transitions.\nExample (new): start :Login;\nDecisions:\nLegacy: if, then, else, endif.\nNew: if (...) then (...), if (...) is (...) then (...), switch, case, endswitch.\nExample (new): if (password correct?) then (Success)\nLoops:\nLegacy: loop, end loop.\nNew: repeat/repeat while, while/endwhile\nExample (new): repeat :Process data;\nBasic activity with start and end:\nExample (new):\n@startuml\nstart\n:Activity1;\n:Activity2;\nstop\n@enduml\nDecision with if/else:\nExample (new):\n@startuml\nstart\nif (condition) then (yes)\n    :Action1;\nelse (no)\n    :Action2;\nendif\nstop\n@enduml\nPlantuml\nFork and join:\nExample (new):\n@startuml\nstart \nfork\n    :Activity1;\nfork again\n    :Activity2;\nend fork\n:Activity3; \nstop\n@enduml\n Example: @startuml\n!pragma teoz true\n:Hello world;\n:This is defined on\nseveral **lines**;\n@enduml' +
  'component diagram: Components:\n[Component] or component: Defines a component.\nExample: [Database]\nInterfaces:\n() Interface or interface: Defines an interface.\nExample: () Data Access\nRelationships:\n--: Assembly connector.\n..: Dependency relationship.\n-->: Directed relationship (usage).\nExample: [Client] ..> () Data Access\nExample:\n@startuml\n[Component1] as C1\n() Interface1 as I1 \nC1 ..> I1 : Uses \n@enduml\nPlantuml\nPackage:\nExample:\n@startuml \npackage "My Package" {\n    [Component1]\n    [Component2]\n} \n@enduml\n' +
  'deployment diagram: Nodes:\nnode: Represents a physical computing resource.\ncloud: Represents cloud-based infrastructure.\nOther node types: artifact, card, component, database, file, folder, frame, hexagon, interface, package, person, queue, rectangle, stack, storage, usecase.\nExample: node Server1\nRelationships and other features are similar to component diagrams.\nComponent with interface and usage:\nNode with component:\nExample:\n@startuml \nnode Server1 {\n    [Application]\n}\n@enduml\nPlantuml\nRelationship between nodes:\nExample:\n@startuml\ncloud "Cloud" {\n    node "Server1" as S1\n} \nnode "Client" as C1\nC1 -right-> S1\n@enduml\n' +
  'state diagram: States:\n[*]: Start/End state.\nState: Defines a state.\nstate : Composite state definition.\n[H]: History state.\nExample: [*] -> State1\nTransitions:\n->: Transition between states.\n: Trigger : Event that triggers the transition.\nExample: State1 -> State2 : Button pressed\nBasic state with transition:\nExample:\n@startuml \n[*] -> Active\nActive -> Inactive : Event \n@enduml\nPlantuml\nComposite state:\nExample:\n@startuml \n[*] -> Active\nstate Active {\n    [*] -> Running\n    Running -> Idle : Event \n}\n@enduml\n' +
  'timing diagram: Participants:\nrobust: For complex, multi-state signals.\nconcise: For simple signals showing data movement.\nbinary: For two-state signals.\nclock: For clock signals with periods and pulses.\nanalog: For continuous signals.\nExample: robust "Processor"\nStates:\n@: Define a state change at a specific time.\n@XX as :label: Define an anchor point in time.\nExample: @0 Processor is Idle\nMessages:\nUse arrows and labels similar to sequence diagrams.\nClock signal:\nExample:\n@startuml\nclock clk with period 1\n@0 clk is high \n@1 clk is low \n@2 clk is high \n@enduml\nPlantuml\nRobust signal with states and messages:\nExample:\n@startuml\nrobust "Web Server" as WS \nconcise "Browser" as B \n\n@0 WS is Idle \n@100 B is "GET /index.html"\nB -> WS \n@150 WS is Processing\n@250 WS is "200 OK" \nWS -> B\n@300 WS is Idle \n@enduml\n' +
  'json diagram: Diagram type:\n@startjson, @endjson\nHighlights:\n#highlight: Highlight specific data.\nStyling:\n<style> block can be used to define custom styles.\nSimple JSON data display:\nExample:\n@startjson \n{\n    "name": "John", \n    "age": 30 \n}\n@endjson\n' +
  'yaml diagram: Diagram type:\n@startyaml, @endyaml\nHighlights and styling options are similar to JSON data diagrams.\nSimple YAML data display:\nExample:\n@startyaml \nname: John\nage: 30\n@endyaml\n' +
  'network diagram: Diagram type:\n@startuml nwdiag, @enduml\nNetworks:\nnetwork: Defines a network.\ngroup: Groups nodes within a network.\nExample: network DMZ { ... }\nBasic network with nodes:\nExample:\n@startuml nwdiag\nnetwork dmz {\n    address = "210.x.x.x/24"\n    web01 [address = "210.x.x.1"];\n    web02 [address = "210.x.x.2"];\n}\n@enduml\nPlantuml\nGroup:\nExample:\n@startuml nwdiag\ngroup {\n    color = "#FFAAAA";\n    web01; web02; db01;\n}\nnetwork dmz {\n    address = "210.x.x.x/24"\n    web01 [address = "210.x.x.1"];\n    web02 [address = "210.x.x.2"];\n}\n@enduml\n' +
  'wireframes diagram: Diagram type:\n@startsalt, @endsalt\nWidgets:\n[Button]: Button.\n( ): Radio button.\n[ ]: Checkbox.\n": Text input.\n^: Droplist.\n{/: Tabs.\n{*}: Menus.\n{S}: Scrollbars.\nExample: [OK]\nBasic widgets:\nExample:\n@startsalt\n{\n    Just plain text\n    [This is my button]\n    () Unchecked radio \n    (X) Checked radio \n    [] Unchecked box \n    [X] Checked box \n    "Enter text here "\n    ^This is a droplist^ \n}\n@endsalt\nPlantuml\nTable with grid:\nExample:\n@startsalt \n{+ \n    Login | "MyName "\n    Password | "**** "\n    [Cancel] | [ OK ]\n}\n@endsalt\n';
